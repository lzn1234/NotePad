Index: app/src/main/res/layout/floating_btn.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/floating_btn.xml	(date 1607959654200)
+++ app/src/main/res/layout/floating_btn.xml	(date 1607959654200)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<android.support.design.widget.FloatingActionButton android:id="@+id/fab"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:layout_gravity="end|bottom"
+    android:src="@drawable/add"
+    android:contentDescription="添加"
+    android:layout_margin="16dp"
+    xmlns:android="http://schemas.android.com/apk/res/android" />
+
+
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(date 1607957808272)
+++ app/build.gradle	(date 1607957808272)
@@ -0,0 +1,26 @@
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion 23
+    buildToolsVersion "23.0.1"
+
+    defaultConfig {
+        applicationId "com.example.android.notepad"
+        minSdkVersion 11
+        targetSdkVersion 11
+
+        testApplicationId "com.example.android.notepad.tests"
+        testInstrumentationRunner "android.test.InstrumentationTestRunner"
+    }
+
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
+        }
+    }
+}
+
+dependencies {
+    implementation 'com.android.support:design:23.4.0'
+}
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>GBK
===================================================================
--- gradle/wrapper/gradle-wrapper.properties	(date 1606207945643)
+++ gradle/wrapper/gradle-wrapper.properties	(date 1606207945643)
@@ -0,0 +1,6 @@
+#Mon Dec 28 10:00:20 PST 2015
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-6.1.1-all.zip
Index: app/src/main/res/drawable/list_selector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/list_selector.xml	(date 1607956815534)
+++ app/src/main/res/drawable/list_selector.xml	(date 1607956815534)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <!--  点击效果  -->
+    <item android:drawable="@drawable/item_selector_selected" android:state_pressed="true"></item>
+
+    <!--  未点击效果  -->
+    <item android:drawable="@drawable/item_selector_default" android:state_pressed="false"></item>
+
+</selector>
\ No newline at end of file
Index: gradlew
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- gradlew	(date 1588734750000)
+++ gradlew	(date 1588734750000)
@@ -0,0 +1,160 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
Index: app/src/main/res/drawable/item_selector_default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/item_selector_default.xml	(date 1607956732689)
+++ app/src/main/res/drawable/item_selector_default.xml	(date 1607956732689)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android">
+    <solid android:color="@color/list_item_default"></solid>
+    <corners android:radius="15dp"></corners>
+</shape>
\ No newline at end of file
Index: import-summary.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- import-summary.txt	(date 1588734750000)
+++ import-summary.txt	(date 1588734750000)
@@ -0,0 +1,36 @@
+ECLIPSE ANDROID PROJECT IMPORT SUMMARY
+======================================
+
+Ignored Files:
+--------------
+The following files were *not* copied into the new Gradle project; you
+should evaluate whether these are still needed in your project and if
+so manually move them:
+
+* Android.mk
+* _index.html
+
+Moved Files:
+------------
+Android Gradle projects use a different directory structure than ADT
+Eclipse projects. Here's how the projects were restructured:
+
+* AndroidManifest.xml => app\src\main\AndroidManifest.xml
+* res\ => app\src\main\res\
+* src\ => app\src\main\java\
+* tests\src\ => app\src\androidTest\java\
+
+Next Steps:
+-----------
+You can now build the project. The Gradle project needs network
+connectivity to download dependencies.
+
+Bugs:
+-----
+If for some reason your project does not build, and you determine that
+it is due to a bug or limitation of the Eclipse to Gradle importer,
+please file a bug at http://b.android.com with category
+Component-Tools.
+
+(This import summary is for your information only, and can be deleted
+after import once you are satisfied with the results.)
Index: gradlew.bat
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- gradlew.bat	(date 1588734750000)
+++ gradlew.bat	(date 1588734750000)
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(date 1606899094760)
+++ app/src/main/AndroidManifest.xml	(date 1606899094760)
@@ -0,0 +1,99 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    package="com.example.android.notepad" >
+
+    <application android:icon="@drawable/app_notes" android:label="@string/app_name">
+        <provider android:name="NotePadProvider"
+            android:authorities="com.google.provider.NotePad"
+            android:exported="false">
+            <grant-uri-permission android:pathPattern=".*" />
+        </provider>
+
+        <activity android:name="NotesList" android:label="@string/title_notes_list">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+<!--            <intent-filter tools:ignore="AppLinkUrlError">-->
+<!--                <action android:name="android.intent.action.VIEW" />-->
+<!--                <action android:name="android.intent.action.EDIT" />-->
+<!--                <action android:name="android.intent.action.PICK" />-->
+<!--                <category android:name="android.intent.category.DEFAULT" />-->
+<!--                <data android:mimeType="vnd.android.cursor.dir/vnd.google.note" />-->
+<!--            </intent-filter>-->
+<!--            <intent-filter>-->
+<!--                <action android:name="android.intent.action.GET_CONTENT" />-->
+<!--                <category android:name="android.intent.category.DEFAULT" />-->
+<!--                <data android:mimeType="vnd.android.cursor.item/vnd.google.note" />-->
+<!--            </intent-filter>-->
+        </activity>
+
+        <activity android:name="NoteEditor"
+            android:theme="@android:style/Theme.Holo.Light"
+            android:screenOrientation="sensor"
+            android:configChanges="keyboardHidden|orientation"
+        >
+            <!-- This filter says that we can view or edit the data of
+                 a single note -->
+            <intent-filter android:label="@string/resolve_edit"
+                tools:ignore="AppLinkUrlError">
+                <action android:name="android.intent.action.VIEW" />
+                <action android:name="android.intent.action.EDIT" />
+                <action android:name="com.android.notepad.action.EDIT_NOTE" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <data android:mimeType="vnd.android.cursor.item/vnd.google.note" />
+            </intent-filter>
+
+            <!-- This filter says that we can create a new note inside
+                 of a directory of notes.  The INSERT action creates an
+                 empty note; the PASTE action initializes a new note from
+                 the current contents of the clipboard. -->
+            <intent-filter>
+                <action android:name="android.intent.action.INSERT" />
+                <action android:name="android.intent.action.PASTE" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <data android:mimeType="vnd.android.cursor.dir/vnd.google.note" />
+            </intent-filter>
+
+        </activity>
+
+        <activity android:name="TitleEditor"
+            android:label="@string/title_edit_title"
+            android:icon="@drawable/ic_menu_edit"
+            android:theme="@android:style/Theme.Holo.Dialog"
+            android:windowSoftInputMode="stateVisible">
+            <!-- This activity implements an alternative action that can be
+                 performed on notes: editing their title.  It can be used as
+                 a default operation if the user invokes this action, and is
+                 available as an alternative action for any note data. -->
+            <intent-filter android:label="@string/resolve_title">
+                <!-- This is the action we perform.  It is a custom action we
+                     define for our application, not a generic VIEW or EDIT
+                     action since we are not a general note viewer/editor. -->
+                <action android:name="com.android.notepad.action.EDIT_TITLE" />
+                <!-- DEFAULT: execute if being directly invoked. -->
+                <category android:name="android.intent.category.DEFAULT" />
+                <!-- ALTERNATIVE: show as an alternative action when the user is
+                     working with this type of data. -->
+                <category android:name="android.intent.category.ALTERNATIVE" />
+                <!-- SELECTED_ALTERNATIVE: show as an alternative action the user
+                     can perform when selecting this type of data. -->
+                <category android:name="android.intent.category.SELECTED_ALTERNATIVE" />
+                <!-- This is the data type we operate on. -->
+                <data android:mimeType="vnd.android.cursor.item/vnd.google.note" />
+            </intent-filter>
+        </activity>
+
+        <activity android:name="NotesLiveFolder" android:label="@string/live_folder_name"
+            android:icon="@drawable/live_folder_notes">
+            <intent-filter>
+                <action android:name="android.intent.action.CREATE_LIVE_FOLDER" />
+                <category android:name="android.intent.category.DEFAULT" />
+            </intent-filter>
+        </activity>
+
+    </application>
+
+</manifest>
Index: app/src/main/res/menu/list_options_menu.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/menu/list_options_menu.xml	(date 1608012721967)
+++ app/src/main/res/menu/list_options_menu.xml	(date 1608012721967)
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="utf-8"?>
+<menu xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:android="http://schemas.android.com/apk/res/android">
+    <!--  This is our one standard application action (creating a new note). -->
+    <item android:id="@+id/menu_add"
+          android:icon="@drawable/ic_menu_compose"
+          android:title="@string/menu_add"
+          android:alphabeticShortcut='a'
+        app:showAsAction="always" />
+    <!--  If there is currently data in the clipboard, this adds a PASTE menu item to the menu
+          so that the user can paste in the data.. -->
+    <item android:id="@+id/menu_paste"
+          android:icon="@drawable/ic_menu_compose"
+          android:title="@string/menu_paste"
+          android:alphabeticShortcut='p' />
+</menu>
\ No newline at end of file
Index: app/src/main/res/menu/list_context_menu.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/menu/list_context_menu.xml	(date 1588734750000)
+++ app/src/main/res/menu/list_context_menu.xml	(date 1588734750000)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<menu xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:id="@+id/context_open"
+          android:title="@string/menu_open" />
+    <item android:id="@+id/context_copy"
+          android:title="@string/menu_copy" />
+    <item android:id="@+id/context_delete"
+          android:title="@string/menu_delete" />
+</menu>
\ No newline at end of file
Index: app/src/main/res/menu/editor_options_menu.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/menu/editor_options_menu.xml	(date 1588734750000)
+++ app/src/main/res/menu/editor_options_menu.xml	(date 1588734750000)
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="utf-8"?>
+<menu xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:id="@+id/menu_save"
+          android:icon="@drawable/ic_menu_save"
+          android:alphabeticShortcut='s'
+          android:title="@string/menu_save"
+          android:showAsAction="ifRoom|withText" />
+    <item android:id="@+id/menu_revert"
+          android:icon="@drawable/ic_menu_revert"
+          android:title="@string/menu_revert" />
+    <item android:id="@+id/menu_delete"
+          android:icon="@drawable/ic_menu_delete"
+          android:title="@string/menu_delete"
+          android:showAsAction="ifRoom|withText" />
+</menu>
\ No newline at end of file
Index: app/src/main/res/layout/note_editor.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/note_editor.xml	(date 1606804960730)
+++ app/src/main/res/layout/note_editor.xml	(date 1606804960730)
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2010 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+  
+          http://www.apache.org/licenses/LICENSE-2.0
+  
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<view xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/note"
+    class="com.example.android.notepad.NoteEditor$LinedEditText"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/noteBackground"
+    android:capitalize="sentences"
+    android:fadingEdge="vertical"
+    android:gravity="top"
+    android:padding="5dp"
+    android:scrollbars="vertical"
+    android:textSize="22sp" />
Index: app/src/main/res/layout/title_editor.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/title_editor.xml	(date 1588734750000)
+++ app/src/main/res/layout/title_editor.xml	(date 1588734750000)
@@ -0,0 +1,43 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2010 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+  
+          http://www.apache.org/licenses/LICENSE-2.0
+  
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" 
+  	android:layout_width="wrap_content" 
+    android:layout_height="wrap_content"
+    android:orientation="vertical"
+    android:paddingLeft="6dip"
+    android:paddingRight="6dip"
+    android:paddingBottom="3dip">
+   					  
+    <EditText android:id="@+id/title" 
+        android:maxLines="1" 
+        android:layout_marginTop="2dp"
+        android:layout_marginBottom="15dp"
+        android:layout_width="wrap_content"
+      	android:ems="25"
+        android:layout_height="wrap_content" 
+        android:autoText="true"
+        android:capitalize="sentences"
+        android:scrollHorizontally="true" />
+   		
+    <Button android:id="@+id/ok"
+        android:layout_width="wrap_content" 
+        android:layout_height="wrap_content" 
+        android:layout_gravity="right"
+        android:text="@string/button_ok"
+        android:onClick="onClickOk" />
+   		
+</LinearLayout>
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/strings.xml	(date 1588734750000)
+++ app/src/main/res/values/strings.xml	(date 1588734750000)
@@ -0,0 +1,43 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2007 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+  
+          http://www.apache.org/licenses/LICENSE-2.0
+  
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<resources>
+    <string name="app_name">NotePad</string>
+    <string name="live_folder_name">Notes</string>
+
+    <string name="title_edit_title">Note title:</string>
+    <string name="title_create">New note</string>
+    <string name="title_edit">Edit: %1$s</string>
+    <string name="title_notes_list">Notes</string>
+
+    <string name="menu_add">New note</string>
+    <string name="menu_save">Save</string>
+    <string name="menu_delete">Delete</string>
+    <string name="menu_open">Open</string>
+    <string name="menu_revert">Revert changes</string>
+    <string name="menu_copy">Copy</string>
+    <string name="menu_paste">Paste</string>
+
+    <string name="button_ok">OK</string>
+    <string name="text_title">Title:</string>
+
+    <string name="resolve_edit">Edit note</string>
+    <string name="resolve_title">Edit title</string>
+
+    <string name="error_title">Error</string>
+    <string name="error_message">Error loading note</string>
+    <string name="nothing_to_save">There is nothing to save</string>
+</resources>
\ No newline at end of file
Index: app/src/main/res/layout/noteslist_item.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/noteslist_item.xml	(date 1608012278068)
+++ app/src/main/res/layout/noteslist_item.xml	(date 1608012278068)
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="75dp"
+    android:background="@drawable/list_selector"
+    android:dividerPadding="20dp"
+    android:orientation="vertical"
+    android:paddingLeft="6dip"
+    android:paddingRight="6dip"
+    android:paddingBottom="3dip">
+
+    <TextView
+        android:id="@+id/note_title"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:paddingLeft="10dp"
+        android:paddingTop="10dp"
+        android:text="TextView"
+        android:textColor="@color/title_textColor"
+        android:textSize="23sp"
+        android:singleLine="true"/>
+
+    <TextView
+        android:id="@+id/note_time"
+        android:layout_width="match_parent"
+        android:layout_height="35dp"
+        android:paddingLeft="10dp"
+        android:paddingTop="5dp"
+        android:text="TextView"
+        android:textSize="19dp"
+        android:singleLine="true"/>
+</LinearLayout>
Index: app/src/main/java/com/example/android/notepad/NoteEditor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/android/notepad/NoteEditor.java	(date 1588734750000)
+++ app/src/main/java/com/example/android/notepad/NoteEditor.java	(date 1588734750000)
@@ -0,0 +1,616 @@
+/*
+ * Copyright (C) 2007 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.example.android.notepad;
+
+import android.app.Activity;
+import android.content.ClipData;
+import android.content.ClipboardManager;
+import android.content.ComponentName;
+import android.content.ContentResolver;
+import android.content.ContentValues;
+import android.content.Context;
+import android.content.Intent;
+import android.content.res.Resources;
+import android.database.Cursor;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.Rect;
+import android.net.Uri;
+import android.os.Bundle;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
+import android.widget.EditText;
+
+/**
+ * This Activity handles "editing" a note, where editing is responding to
+ * {@link Intent#ACTION_VIEW} (request to view data), edit a note
+ * {@link Intent#ACTION_EDIT}, create a note {@link Intent#ACTION_INSERT}, or
+ * create a new note from the current contents of the clipboard {@link Intent#ACTION_PASTE}.
+ *
+ * NOTE: Notice that the provider operations in this Activity are taking place on the UI thread.
+ * This is not a good practice. It is only done here to make the code more readable. A real
+ * application should use the {@link android.content.AsyncQueryHandler}
+ * or {@link android.os.AsyncTask} object to perform operations asynchronously on a separate thread.
+ */
+public class NoteEditor extends Activity {
+    // For logging and debugging purposes
+    private static final String TAG = "NoteEditor";
+
+    /*
+     * Creates a projection that returns the note ID and the note contents.
+     */
+    private static final String[] PROJECTION =
+        new String[] {
+            NotePad.Notes._ID,
+            NotePad.Notes.COLUMN_NAME_TITLE,
+            NotePad.Notes.COLUMN_NAME_NOTE
+    };
+
+    // A label for the saved state of the activity
+    private static final String ORIGINAL_CONTENT = "origContent";
+
+    // This Activity can be started by more than one action. Each action is represented
+    // as a "state" constant
+    private static final int STATE_EDIT = 0;
+    private static final int STATE_INSERT = 1;
+
+    // Global mutable variables
+    private int mState;
+    private Uri mUri;
+    private Cursor mCursor;
+    private EditText mText;
+    private String mOriginalContent;
+
+    /**
+     * Defines a custom EditText View that draws lines between each line of text that is displayed.
+     */
+    public static class LinedEditText extends EditText {
+        private Rect mRect;
+        private Paint mPaint;
+
+        // This constructor is used by LayoutInflater
+        public LinedEditText(Context context, AttributeSet attrs) {
+            super(context, attrs);
+
+            // Creates a Rect and a Paint object, and sets the style and color of the Paint object.
+            mRect = new Rect();
+            mPaint = new Paint();
+            mPaint.setStyle(Paint.Style.STROKE);
+            mPaint.setColor(0x800000FF);
+        }
+
+        /**
+         * This is called to draw the LinedEditText object
+         * @param canvas The canvas on which the background is drawn.
+         */
+        @Override
+        protected void onDraw(Canvas canvas) {
+
+            // Gets the number of lines of text in the View.
+            int count = getLineCount();
+
+            // Gets the global Rect and Paint objects
+            Rect r = mRect;
+            Paint paint = mPaint;
+
+            /*
+             * Draws one line in the rectangle for every line of text in the EditText
+             */
+            for (int i = 0; i < count; i++) {
+
+                // Gets the baseline coordinates for the current line of text
+                int baseline = getLineBounds(i, r);
+
+                /*
+                 * Draws a line in the background from the left of the rectangle to the right,
+                 * at a vertical position one dip below the baseline, using the "paint" object
+                 * for details.
+                 */
+                canvas.drawLine(r.left, baseline + 1, r.right, baseline + 1, paint);
+            }
+
+            // Finishes up by calling the parent method
+            super.onDraw(canvas);
+        }
+    }
+
+    /**
+     * This method is called by Android when the Activity is first started. From the incoming
+     * Intent, it determines what kind of editing is desired, and then does it.
+     */
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        /*
+         * Creates an Intent to use when the Activity object's result is sent back to the
+         * caller.
+         */
+        final Intent intent = getIntent();
+
+        /*
+         *  Sets up for the edit, based on the action specified for the incoming Intent.
+         */
+
+        // Gets the action that triggered the intent filter for this Activity
+        final String action = intent.getAction();
+
+        // For an edit action:
+        if (Intent.ACTION_EDIT.equals(action)) {
+
+            // Sets the Activity state to EDIT, and gets the URI for the data to be edited.
+            mState = STATE_EDIT;
+            mUri = intent.getData();
+
+            // For an insert or paste action:
+        } else if (Intent.ACTION_INSERT.equals(action)
+                || Intent.ACTION_PASTE.equals(action)) {
+
+            // Sets the Activity state to INSERT, gets the general note URI, and inserts an
+            // empty record in the provider
+            mState = STATE_INSERT;
+            mUri = getContentResolver().insert(intent.getData(), null);
+
+            /*
+             * If the attempt to insert the new note fails, shuts down this Activity. The
+             * originating Activity receives back RESULT_CANCELED if it requested a result.
+             * Logs that the insert failed.
+             */
+            if (mUri == null) {
+
+                // Writes the log identifier, a message, and the URI that failed.
+                Log.e(TAG, "Failed to insert new note into " + getIntent().getData());
+
+                // Closes the activity.
+                finish();
+                return;
+            }
+
+            // Since the new entry was created, this sets the result to be returned
+            // set the result to be returned.
+            setResult(RESULT_OK, (new Intent()).setAction(mUri.toString()));
+
+        // If the action was other than EDIT or INSERT:
+        } else {
+
+            // Logs an error that the action was not understood, finishes the Activity, and
+            // returns RESULT_CANCELED to an originating Activity.
+            Log.e(TAG, "Unknown action, exiting");
+            finish();
+            return;
+        }
+
+        /*
+         * Using the URI passed in with the triggering Intent, gets the note or notes in
+         * the provider.
+         * Note: This is being done on the UI thread. It will block the thread until the query
+         * completes. In a sample app, going against a simple provider based on a local database,
+         * the block will be momentary, but in a real app you should use
+         * android.content.AsyncQueryHandler or android.os.AsyncTask.
+         */
+        mCursor = managedQuery(
+            mUri,         // The URI that gets multiple notes from the provider.
+            PROJECTION,   // A projection that returns the note ID and note content for each note.
+            null,         // No "where" clause selection criteria.
+            null,         // No "where" clause selection values.
+            null          // Use the default sort order (modification date, descending)
+        );
+
+        // For a paste, initializes the data from clipboard.
+        // (Must be done after mCursor is initialized.)
+        if (Intent.ACTION_PASTE.equals(action)) {
+            // Does the paste
+            performPaste();
+            // Switches the state to EDIT so the title can be modified.
+            mState = STATE_EDIT;
+        }
+
+        // Sets the layout for this Activity. See res/layout/note_editor.xml
+        setContentView(R.layout.note_editor);
+
+        // Gets a handle to the EditText in the the layout.
+        mText = (EditText) findViewById(R.id.note);
+
+        /*
+         * If this Activity had stopped previously, its state was written the ORIGINAL_CONTENT
+         * location in the saved Instance state. This gets the state.
+         */
+        if (savedInstanceState != null) {
+            mOriginalContent = savedInstanceState.getString(ORIGINAL_CONTENT);
+        }
+    }
+
+    /**
+     * This method is called when the Activity is about to come to the foreground. This happens
+     * when the Activity comes to the top of the task stack, OR when it is first starting.
+     *
+     * Moves to the first note in the list, sets an appropriate title for the action chosen by
+     * the user, puts the note contents into the TextView, and saves the original text as a
+     * backup.
+     */
+    @Override
+    protected void onResume() {
+        super.onResume();
+
+        /*
+         * mCursor is initialized, since onCreate() always precedes onResume for any running
+         * process. This tests that it's not null, since it should always contain data.
+         */
+        if (mCursor != null) {
+            // Requery in case something changed while paused (such as the title)
+            mCursor.requery();
+
+            /* Moves to the first record. Always call moveToFirst() before accessing data in
+             * a Cursor for the first time. The semantics of using a Cursor are that when it is
+             * created, its internal index is pointing to a "place" immediately before the first
+             * record.
+             */
+            mCursor.moveToFirst();
+
+            // Modifies the window title for the Activity according to the current Activity state.
+            if (mState == STATE_EDIT) {
+                // Set the title of the Activity to include the note title
+                int colTitleIndex = mCursor.getColumnIndex(NotePad.Notes.COLUMN_NAME_TITLE);
+                String title = mCursor.getString(colTitleIndex);
+                Resources res = getResources();
+                String text = String.format(res.getString(R.string.title_edit), title);
+                setTitle(text);
+            // Sets the title to "create" for inserts
+            } else if (mState == STATE_INSERT) {
+                setTitle(getText(R.string.title_create));
+            }
+
+            /*
+             * onResume() may have been called after the Activity lost focus (was paused).
+             * The user was either editing or creating a note when the Activity paused.
+             * The Activity should re-display the text that had been retrieved previously, but
+             * it should not move the cursor. This helps the user to continue editing or entering.
+             */
+
+            // Gets the note text from the Cursor and puts it in the TextView, but doesn't change
+            // the text cursor's position.
+            int colNoteIndex = mCursor.getColumnIndex(NotePad.Notes.COLUMN_NAME_NOTE);
+            String note = mCursor.getString(colNoteIndex);
+            mText.setTextKeepState(note);
+
+            // Stores the original note text, to allow the user to revert changes.
+            if (mOriginalContent == null) {
+                mOriginalContent = note;
+            }
+
+        /*
+         * Something is wrong. The Cursor should always contain data. Report an error in the
+         * note.
+         */
+        } else {
+            setTitle(getText(R.string.error_title));
+            mText.setText(getText(R.string.error_message));
+        }
+    }
+
+    /**
+     * This method is called when an Activity loses focus during its normal operation, and is then
+     * later on killed. The Activity has a chance to save its state so that the system can restore
+     * it.
+     *
+     * Notice that this method isn't a normal part of the Activity lifecycle. It won't be called
+     * if the user simply navigates away from the Activity.
+     */
+    @Override
+    protected void onSaveInstanceState(Bundle outState) {
+        // Save away the original text, so we still have it if the activity
+        // needs to be killed while paused.
+        outState.putString(ORIGINAL_CONTENT, mOriginalContent);
+    }
+
+    /**
+     * This method is called when the Activity loses focus.
+     *
+     * For Activity objects that edit information, onPause() may be the one place where changes are
+     * saved. The Android application model is predicated on the idea that "save" and "exit" aren't
+     * required actions. When users navigate away from an Activity, they shouldn't have to go back
+     * to it to complete their work. The act of going away should save everything and leave the
+     * Activity in a state where Android can destroy it if necessary.
+     *
+     * If the user hasn't done anything, then this deletes or clears out the note, otherwise it
+     * writes the user's work to the provider.
+     */
+    @Override
+    protected void onPause() {
+        super.onPause();
+
+        /*
+         * Tests to see that the query operation didn't fail (see onCreate()). The Cursor object
+         * will exist, even if no records were returned, unless the query failed because of some
+         * exception or error.
+         *
+         */
+        if (mCursor != null) {
+
+            // Get the current note text.
+            String text = mText.getText().toString();
+            int length = text.length();
+
+            /*
+             * If the Activity is in the midst of finishing and there is no text in the current
+             * note, returns a result of CANCELED to the caller, and deletes the note. This is done
+             * even if the note was being edited, the assumption being that the user wanted to
+             * "clear out" (delete) the note.
+             */
+            if (isFinishing() && (length == 0)) {
+                setResult(RESULT_CANCELED);
+                deleteNote();
+
+                /*
+                 * Writes the edits to the provider. The note has been edited if an existing note was
+                 * retrieved into the editor *or* if a new note was inserted. In the latter case,
+                 * onCreate() inserted a new empty note into the provider, and it is this new note
+                 * that is being edited.
+                 */
+            } else if (mState == STATE_EDIT) {
+                // Creates a map to contain the new values for the columns
+                updateNote(text, null);
+            } else if (mState == STATE_INSERT) {
+                updateNote(text, text);
+                mState = STATE_EDIT;
+          }
+        }
+    }
+
+    /**
+     * This method is called when the user clicks the device's Menu button the first time for
+     * this Activity. Android passes in a Menu object that is populated with items.
+     *
+     * Builds the menus for editing and inserting, and adds in alternative actions that
+     * registered themselves to handle the MIME types for this application.
+     *
+     * @param menu A Menu object to which items should be added.
+     * @return True to display the menu.
+     */
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        // Inflate menu from XML resource
+        MenuInflater inflater = getMenuInflater();
+        inflater.inflate(R.menu.editor_options_menu, menu);
+
+        // Only add extra menu items for a saved note 
+        if (mState == STATE_EDIT) {
+            // Append to the
+            // menu items for any other activities that can do stuff with it
+            // as well.  This does a query on the system for any activities that
+            // implement the ALTERNATIVE_ACTION for our data, adding a menu item
+            // for each one that is found.
+            Intent intent = new Intent(null, mUri);
+            intent.addCategory(Intent.CATEGORY_ALTERNATIVE);
+            menu.addIntentOptions(Menu.CATEGORY_ALTERNATIVE, 0, 0,
+                    new ComponentName(this, NoteEditor.class), null, intent, 0, null);
+        }
+
+        return super.onCreateOptionsMenu(menu);
+    }
+
+    @Override
+    public boolean onPrepareOptionsMenu(Menu menu) {
+        // Check if note has changed and enable/disable the revert option
+        int colNoteIndex = mCursor.getColumnIndex(NotePad.Notes.COLUMN_NAME_NOTE);
+        String savedNote = mCursor.getString(colNoteIndex);
+        String currentNote = mText.getText().toString();
+        if (savedNote.equals(currentNote)) {
+            menu.findItem(R.id.menu_revert).setVisible(false);
+        } else {
+            menu.findItem(R.id.menu_revert).setVisible(true);
+        }
+        return super.onPrepareOptionsMenu(menu);
+    }
+
+    /**
+     * This method is called when a menu item is selected. Android passes in the selected item.
+     * The switch statement in this method calls the appropriate method to perform the action the
+     * user chose.
+     *
+     * @param item The selected MenuItem
+     * @return True to indicate that the item was processed, and no further work is necessary. False
+     * to proceed to further processing as indicated in the MenuItem object.
+     */
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        // Handle all of the possible menu actions.
+        switch (item.getItemId()) {
+        case R.id.menu_save:
+            String text = mText.getText().toString();
+            updateNote(text, null);
+            finish();
+            break;
+        case R.id.menu_delete:
+            deleteNote();
+            finish();
+            break;
+        case R.id.menu_revert:
+            cancelNote();
+            break;
+        }
+        return super.onOptionsItemSelected(item);
+    }
+
+//BEGIN_INCLUDE(paste)
+    /**
+     * A helper method that replaces the note's data with the contents of the clipboard.
+     */
+    private final void performPaste() {
+
+        // Gets a handle to the Clipboard Manager
+        ClipboardManager clipboard = (ClipboardManager)
+                getSystemService(Context.CLIPBOARD_SERVICE);
+
+        // Gets a content resolver instance
+        ContentResolver cr = getContentResolver();
+
+        // Gets the clipboard data from the clipboard
+        ClipData clip = clipboard.getPrimaryClip();
+        if (clip != null) {
+
+            String text=null;
+            String title=null;
+
+            // Gets the first item from the clipboard data
+            ClipData.Item item = clip.getItemAt(0);
+
+            // Tries to get the item's contents as a URI pointing to a note
+            Uri uri = item.getUri();
+
+            // Tests to see that the item actually is an URI, and that the URI
+            // is a content URI pointing to a provider whose MIME type is the same
+            // as the MIME type supported by the Note pad provider.
+            if (uri != null && NotePad.Notes.CONTENT_ITEM_TYPE.equals(cr.getType(uri))) {
+
+                // The clipboard holds a reference to data with a note MIME type. This copies it.
+                Cursor orig = cr.query(
+                        uri,            // URI for the content provider
+                        PROJECTION,     // Get the columns referred to in the projection
+                        null,           // No selection variables
+                        null,           // No selection variables, so no criteria are needed
+                        null            // Use the default sort order
+                );
+
+                // If the Cursor is not null, and it contains at least one record
+                // (moveToFirst() returns true), then this gets the note data from it.
+                if (orig != null) {
+                    if (orig.moveToFirst()) {
+                        int colNoteIndex = mCursor.getColumnIndex(NotePad.Notes.COLUMN_NAME_NOTE);
+                        int colTitleIndex = mCursor.getColumnIndex(NotePad.Notes.COLUMN_NAME_TITLE);
+                        text = orig.getString(colNoteIndex);
+                        title = orig.getString(colTitleIndex);
+                    }
+
+                    // Closes the cursor.
+                    orig.close();
+                }
+            }
+
+            // If the contents of the clipboard wasn't a reference to a note, then
+            // this converts whatever it is to text.
+            if (text == null) {
+                text = item.coerceToText(this).toString();
+            }
+
+            // Updates the current note with the retrieved title and text.
+            updateNote(text, title);
+        }
+    }
+//END_INCLUDE(paste)
+
+    /**
+     * Replaces the current note contents with the text and title provided as arguments.
+     * @param text The new note contents to use.
+     * @param title The new note title to use
+     */
+    private final void updateNote(String text, String title) {
+
+        // Sets up a map to contain values to be updated in the provider.
+        ContentValues values = new ContentValues();
+        values.put(NotePad.Notes.COLUMN_NAME_MODIFICATION_DATE, System.currentTimeMillis());
+
+        // If the action is to insert a new note, this creates an initial title for it.
+        if (mState == STATE_INSERT) {
+
+            // If no title was provided as an argument, create one from the note text.
+            if (title == null) {
+  
+                // Get the note's length
+                int length = text.length();
+
+                // Sets the title by getting a substring of the text that is 31 characters long
+                // or the number of characters in the note plus one, whichever is smaller.
+                title = text.substring(0, Math.min(30, length));
+  
+                // If the resulting length is more than 30 characters, chops off any
+                // trailing spaces
+                if (length > 30) {
+                    int lastSpace = title.lastIndexOf(' ');
+                    if (lastSpace > 0) {
+                        title = title.substring(0, lastSpace);
+                    }
+                }
+            }
+            // In the values map, sets the value of the title
+            values.put(NotePad.Notes.COLUMN_NAME_TITLE, title);
+        } else if (title != null) {
+            // In the values map, sets the value of the title
+            values.put(NotePad.Notes.COLUMN_NAME_TITLE, title);
+        }
+
+        // This puts the desired notes text into the map.
+        values.put(NotePad.Notes.COLUMN_NAME_NOTE, text);
+
+        /*
+         * Updates the provider with the new values in the map. The ListView is updated
+         * automatically. The provider sets this up by setting the notification URI for
+         * query Cursor objects to the incoming URI. The content resolver is thus
+         * automatically notified when the Cursor for the URI changes, and the UI is
+         * updated.
+         * Note: This is being done on the UI thread. It will block the thread until the
+         * update completes. In a sample app, going against a simple provider based on a
+         * local database, the block will be momentary, but in a real app you should use
+         * android.content.AsyncQueryHandler or android.os.AsyncTask.
+         */
+        getContentResolver().update(
+                mUri,    // The URI for the record to update.
+                values,  // The map of column names and new values to apply to them.
+                null,    // No selection criteria are used, so no where columns are necessary.
+                null     // No where columns are used, so no where arguments are necessary.
+            );
+
+
+    }
+
+    /**
+     * This helper method cancels the work done on a note.  It deletes the note if it was
+     * newly created, or reverts to the original text of the note i
+     */
+    private final void cancelNote() {
+        if (mCursor != null) {
+            if (mState == STATE_EDIT) {
+                // Put the original note text back into the database
+                mCursor.close();
+                mCursor = null;
+                ContentValues values = new ContentValues();
+                values.put(NotePad.Notes.COLUMN_NAME_NOTE, mOriginalContent);
+                getContentResolver().update(mUri, values, null, null);
+            } else if (mState == STATE_INSERT) {
+                // We inserted an empty note, make sure to delete it
+                deleteNote();
+            }
+        }
+        setResult(RESULT_CANCELED);
+        finish();
+    }
+
+    /**
+     * Take care of deleting a note.  Simply deletes the entry.
+     */
+    private final void deleteNote() {
+        if (mCursor != null) {
+            mCursor.close();
+            mCursor = null;
+            getContentResolver().delete(mUri, null, null);
+            mText.setText("");
+        }
+    }
+}
Index: app/src/main/java/com/example/android/notepad/NotesList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/android/notepad/NotesList.java	(date 1608017294519)
+++ app/src/main/java/com/example/android/notepad/NotesList.java	(date 1608017294519)
@@ -0,0 +1,461 @@
+/*
+ * Copyright (C) 2007 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.example.android.notepad;
+
+import com.example.android.notepad.NotePad;
+
+import android.annotation.SuppressLint;
+import android.app.ListActivity;
+import android.content.ClipboardManager;
+import android.content.ClipData;
+import android.content.ComponentName;
+import android.content.ContentUris;
+import android.content.Context;
+import android.content.Intent;
+import android.database.Cursor;
+import android.graphics.Color;
+import android.net.Uri;
+import android.os.Bundle;
+import android.support.design.widget.FloatingActionButton;
+import android.util.Log;
+import android.view.ContextMenu;
+import android.view.LayoutInflater;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
+import android.view.View;
+import android.view.ContextMenu.ContextMenuInfo;
+import android.widget.AdapterView;
+import android.widget.ListView;
+import android.widget.SimpleCursorAdapter;
+
+import java.security.KeyStore;
+
+/**
+ * Displays a list of notes. Will display notes from the {@link Uri}
+ * provided in the incoming Intent if there is one, otherwise it defaults to displaying the
+ * contents of the {@link NotePadProvider}.
+ *
+ * NOTE: Notice that the provider operations in this Activity are taking place on the UI thread.
+ * This is not a good practice. It is only done here to make the code more readable. A real
+ * application should use the {@link android.content.AsyncQueryHandler} or
+ * {@link android.os.AsyncTask} object to perform operations asynchronously on a separate thread.
+ */
+public class NotesList extends ListActivity {
+
+    // For logging and debugging
+    private static final String TAG = "NotesList";
+
+    /**
+     * The columns needed by the cursor adapter
+     */
+    private static final String[] PROJECTION = new String[] {
+            NotePad.Notes._ID, // 0
+            NotePad.Notes.COLUMN_NAME_TITLE, // 1
+            NotePad.Notes.COLUMN_NAME_MODIFICATION_DATE, //3
+    };
+
+    /** The index of the title column */
+    private static final int COLUMN_INDEX_TITLE = 1;
+    private static final int COLUMN_INDEX_MODIFICATION_DATE = 3;
+
+
+    @SuppressLint("ResourceAsColor")
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        Log.v("123","启动app");
+
+        /*
+        * 设置背景颜色
+        * */
+        ListView listView = this.getListView();
+        listView.setBackgroundColor(Color.parseColor("#f2f2f2"));
+        listView.setDividerHeight(24);
+        listView.setPadding(45,24,45,0);
+        listView.setVerticalScrollBarEnabled(false)     ;
+/*        FloatingActionButton floatingActionButton = (FloatingActionButton) findViewById(R.id.fab);
+
+        View view = getLayoutInflater().inflate(R.layout.floating_btn,null);
+
+        this.addContentView(view,null);*/
+        // The user does not need to hold down the key to use menu shortcuts.
+//        setDefaultKeyMode(DEFAULT_KEYS_SHORTCUT);
+
+        /* If no data is given in the Intent that started this Activity, then this Activity
+         * was started when the intent filter matched a MAIN action. We should use the default
+         * provider URI.
+         */
+        // Gets the intent that started this Activity.
+        Intent intent = getIntent();
+
+        // If there is no data associated with the Intent, sets the data to the default URI, which
+        // accesses a list of notes.
+        if (intent.getData() == null) {
+            intent.setData(NotePad.Notes.CONTENT_URI);
+        }
+
+        /*
+         * Sets the callback for context menu activation for the ListView. The listener is set
+         * to be this Activity. The effect is that context menus are enabled for items in the
+         * ListView, and the context menu is handled by a method in NotesList.
+         */
+        getListView().setOnCreateContextMenuListener(this);
+
+        /*
+         *执行托管查询。该活动在需要时处理关闭和请求游标。
+         */
+        Cursor cursor = managedQuery(
+            getIntent().getData(),            //
+            PROJECTION,                       // Return the note ID and title for each note.
+            null,                             // No where clause, return all records.
+            null,                             // No where clause, therefore no where column values.
+            NotePad.Notes.DEFAULT_SORT_ORDER  // Use the default sort order.
+        );
+
+        /*
+         * The following two arrays create a "map" between columns in the cursor and view IDs
+         * for items in the ListView. Each element in the dataColumns array represents
+         * a column name; each element in the viewID array represents the ID of a View.
+         * The SimpleCursorAdapter maps them in ascending order to determine where each column
+         * value will appear in the ListView.
+         */
+
+        //
+        String[] dataColumns = { NotePad.Notes.COLUMN_NAME_TITLE,NotePad.Notes.COLUMN_NAME_MODIFICATION_DATE } ;
+
+        // The view IDs that will display the cursor columns, initialized to the TextView in
+        // noteslist_item.xml
+        int[] viewIDs = {R.id.note_title,R.id.note_time };
+
+        // Creates the backing adapter for the ListView.
+        SimpleCursorAdapter adapter
+            = new SimpleCursorAdapter(
+                      this,                             // The Context for the ListView
+                      R.layout.noteslist_item,          // Points to the XML for a list item
+                      cursor,                           // The cursor to get items from
+                      dataColumns,  //from
+                      viewIDs   //to
+              );
+
+        // Sets the ListView's adapter to be the cursor adapter that was just created.
+        setListAdapter(adapter);
+    }
+
+    /**
+     创建菜单
+     */
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        // Inflate menu from XML resource
+        MenuInflater inflater = getMenuInflater();
+        inflater.inflate(R.menu.list_options_menu, menu);
+        Intent intent = new Intent(null, getIntent().getData());
+        intent.addCategory(Intent.CATEGORY_ALTERNATIVE);
+        menu.addIntentOptions(Menu.CATEGORY_ALTERNATIVE, 0, 0,
+                new ComponentName(this, NotesList.class), null, intent, 0, null);
+
+        return super.onCreateOptionsMenu(menu);
+    }
+
+    /*
+    * 菜单打开
+    * */
+    @Override
+    public boolean onPrepareOptionsMenu(Menu menu) {
+        super.onPrepareOptionsMenu(menu);
+
+        // The paste menu item is enabled if there is data on the clipboard.
+        ClipboardManager clipboard = (ClipboardManager)
+                getSystemService(Context.CLIPBOARD_SERVICE);
+
+
+        MenuItem mPasteItem = menu.findItem(R.id.menu_paste);
+
+        // If the clipboard contains an item, enables the Paste option on the menu.
+        if (clipboard.hasPrimaryClip()) {
+            mPasteItem.setEnabled(true);
+        } else {
+            // If the clipboard is empty, disables the menu's Paste option.
+            mPasteItem.setEnabled(false);
+        }
+
+        // Gets the number of notes currently being displayed.
+        final boolean haveItems = getListAdapter().getCount() > 0;
+
+        // If there are any notes in the list (which implies that one of
+        // them is selected), then we need to generate the actions that
+        // can be performed on the current selection.  This will be a combination
+        // of our own specific actions along with any extensions that can be
+        // found.
+        if (haveItems) {
+
+            // This is the selected item.
+            Uri uri = ContentUris.withAppendedId(getIntent().getData(), getSelectedItemId());
+
+            // Creates an array of Intents with one element. This will be used to send an Intent
+            // based on the selected menu item.
+            Intent[] specifics = new Intent[1];
+
+            // Sets the Intent in the array to be an EDIT action on the URI of the selected note.
+            specifics[0] = new Intent(Intent.ACTION_EDIT, uri);
+
+            // Creates an array of menu items with one element. This will contain the EDIT option.
+            MenuItem[] items = new MenuItem[1];
+
+            // Creates an Intent with no specific action, using the URI of the selected note.
+            Intent intent = new Intent(null, uri);
+
+            /* Adds the category ALTERNATIVE to the Intent, with the note ID URI as its
+             * data. This prepares the Intent as a place to group alternative options in the
+             * menu.
+             */
+            intent.addCategory(Intent.CATEGORY_ALTERNATIVE);
+
+            /*
+             * Add alternatives to the menu
+             */
+            menu.addIntentOptions(
+                Menu.CATEGORY_ALTERNATIVE,  // Add the Intents as options in the alternatives group.
+                Menu.NONE,                  // A unique item ID is not required.
+                Menu.NONE,                  // The alternatives don't need to be in order.
+                null,                       // The caller's name is not excluded from the group.
+                specifics,                  // These specific options must appear first.
+                intent,                     // These Intent objects map to the options in specifics.
+                Menu.NONE,                  // No flags are required.
+                items                       // The menu items generated from the specifics-to-
+                                            // Intents mapping
+            );
+                // If the Edit menu item exists, adds shortcuts for it.
+                if (items[0] != null) {
+
+                    // Sets the Edit menu item shortcut to numeric "1", letter "e"
+                    items[0].setShortcut('1', 'e');
+                }
+            } else {
+                // If the list is empty, removes any existing alternative actions from the menu
+                menu.removeGroup(Menu.CATEGORY_ALTERNATIVE);
+            }
+
+        // Displays the menu
+        return true;
+    }
+
+    /*
+    * 菜单项点击
+    * */
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()) {
+        case R.id.menu_add:
+        //添加按钮
+           startActivity(new Intent(Intent.ACTION_INSERT, getIntent().getData()));
+           Log.v("123","click the menu_item");
+           return true;
+        case R.id.menu_paste:
+        //粘贴按钮
+          startActivity(new Intent(Intent.ACTION_PASTE, getIntent().getData()));
+          return true;
+        default:
+            return super.onOptionsItemSelected(item);
+        }
+    }
+
+    /*
+    * 创建上下文菜单
+    * */
+    @Override
+    public void onCreateContextMenu(ContextMenu menu, View view, ContextMenuInfo menuInfo) {
+
+        Log.v("123","contextMenu");
+
+        // The data from the menu item.
+        AdapterView.AdapterContextMenuInfo info;
+
+        // Tries to get the position of the item in the ListView that was long-pressed.
+        try {
+            // Casts the incoming data object into the type for AdapterView objects.
+            info = (AdapterView.AdapterContextMenuInfo)menuInfo;
+        } catch (ClassCastException e) {
+            // If the menu object can't be cast, logs an error.
+            Log.e(TAG, "bad menuInfo", e);
+            return;
+        }
+
+        /*
+         * Gets the data associated with the item at the selected position. getItem() returns
+         * whatever the backing adapter of the ListView has associated with the item. In NotesList,
+         * the adapter associated all of the data for a note with its list item. As a result,
+         * getItem() returns that data as a Cursor.
+         */
+        Cursor cursor = (Cursor) getListAdapter().getItem(info.position);
+
+        // If the cursor is empty, then for some reason the adapter can't get the data from the
+        // provider, so returns null to the caller.
+        if (cursor == null) {
+            // For some reason the requested item isn't available, do nothing
+            return;
+        }
+
+        // Inflate menu from XML resource
+        MenuInflater inflater = getMenuInflater();
+        inflater.inflate(R.menu.list_context_menu, menu);
+
+        // Sets the menu header to be the title of the selected note.
+//        menu.setHeaderTitle(cursor.getString(COLUMN_INDEX_TITLE));
+
+        // Append to the
+        // menu items for any other activities that can do stuff with it
+        // as well.  This does a query on the system for any activities that
+        // implement the ALTERNATIVE_ACTION for our data, adding a menu item
+        // for each one that is found.
+
+
+        //动态添加菜单项
+        Intent intent = new Intent(null, Uri.withAppendedPath(getIntent().getData(),
+                                        Integer.toString((int) info.id) ));
+        intent.addCategory(Intent.CATEGORY_ALTERNATIVE);
+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        menu.addIntentOptions(Menu.CATEGORY_ALTERNATIVE, 0, 0,
+                new ComponentName(this, NotesList.class), null, intent, 0, null);
+    }
+
+    /**
+     * 上下文菜单点击
+     * This method is called when the user selects an item from the context menu
+     * (see onCreateContextMenu()). The only menu items that are actually handled are DELETE and
+     * COPY. Anything else is an alternative option, for which default handling should be done.
+     *
+     * @param item The selected menu item
+     * @return True if the menu item was DELETE, and no default processing is need, otherwise false,
+     * which triggers the default handling of the item.
+     * @throws ClassCastException
+     */
+    @Override
+    public boolean onContextItemSelected(MenuItem item) {
+        // The data from the menu item.
+        AdapterView.AdapterContextMenuInfo info;
+
+        /*
+         * Gets the extra info from the menu item. When an note in the Notes list is long-pressed, a
+         * context menu appears. The menu items for the menu automatically get the data
+         * associated with the note that was long-pressed. The data comes from the provider that
+         * backs the list.
+         *
+         * The note's data is passed to the context menu creation routine in a ContextMenuInfo
+         * object.
+         *
+         * When one of the context menu items is clicked, the same data is passed, along with the
+         * note ID, to onContextItemSelected() via the item parameter.
+         */
+        try {
+            // Casts the data object in the item into the type for AdapterView objects.
+            info = (AdapterView.AdapterContextMenuInfo) item.getMenuInfo();
+        } catch (ClassCastException e) {
+
+            // If the object can't be cast, logs an error
+            Log.e(TAG, "bad menuInfo", e);
+
+            // Triggers default processing of the menu item.
+            return false;
+        }
+        // Appends the selected note's ID to the URI sent with the incoming Intent.
+        Uri noteUri = ContentUris.withAppendedId(getIntent().getData(), info.id);
+
+        /*
+         * Gets the menu item's ID and compares it to known actions.
+         */
+        switch (item.getItemId()) {
+        case R.id.context_open:
+            // Launch activity to view/edit the currently selected item
+            startActivity(new Intent(Intent.ACTION_EDIT, noteUri));
+            return true;
+//BEGIN_INCLUDE(copy)
+        case R.id.context_copy:
+            // Gets a handle to the clipboard service.
+            ClipboardManager clipboard = (ClipboardManager)
+                    getSystemService(Context.CLIPBOARD_SERVICE);
+  
+            // Copies the notes URI to the clipboard. In effect, this copies the note itself
+            clipboard.setPrimaryClip(ClipData.newUri(   // new clipboard item holding a URI
+                    getContentResolver(),               // resolver to retrieve URI info
+                    "Note",                             // label for the clip
+                    noteUri)                            // the URI
+            );
+  
+            // Returns to the caller and skips further processing.
+            return true;
+//END_INCLUDE(copy)
+        case R.id.context_delete:
+  
+            // Deletes the note from the provider by passing in a URI in note ID format.
+            // Please see the introductory note about performing provider operations on the
+            // UI thread.
+            getContentResolver().delete(
+                noteUri,  // The URI of the provider
+                null,     // No where clause is needed, since only a single note ID is being
+                          // passed in.
+                null      // No where clause is used, so no where arguments are needed.
+            );
+  
+            // Returns to the caller and skips further processing.
+            return true;
+        default:
+            return super.onContextItemSelected(item);
+        }
+    }
+
+    /**
+     * This method is called when the user clicks a note in the displayed list.
+     *
+     * This method handles incoming actions of either PICK (get data from the provider) or
+     * GET_CONTENT (get or create data). If the incoming action is EDIT, this method sends a
+     * new Intent to start NoteEditor.
+     * @param l The ListView that contains the clicked item
+     * @param v The View of the individual item
+     * @param position The position of v in the displayed list
+     * @param id The row ID of the clicked item
+     */
+
+
+    /*
+    * 列表项的点击事件
+    * */
+    @Override
+    protected void onListItemClick(ListView l, View v, int position, long id) {
+
+        // Constructs a new URI from the incoming URI and the row ID
+        Uri uri = ContentUris.withAppendedId(getIntent().getData(), id);
+
+        // Gets the action from the incoming Intent
+        String action = getIntent().getAction();
+
+        // Handles requests for note data
+        if (Intent.ACTION_PICK.equals(action) || Intent.ACTION_GET_CONTENT.equals(action)) {
+
+            // Sets the result to return to the component that called this Activity. The
+            // result contains the new URI
+            setResult(RESULT_OK, new Intent().setData(uri));
+        } else {
+
+            // Sends out an Intent to start an Activity that can handle ACTION_EDIT. The
+            // Intent's data is the note ID URI. The effect is to call NoteEdit.
+            startActivity(new Intent(Intent.ACTION_EDIT, uri));
+        }
+    }
+}
Index: app/src/main/java/com/example/android/notepad/NotePadProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/android/notepad/NotePadProvider.java	(date 1607934512629)
+++ app/src/main/java/com/example/android/notepad/NotePadProvider.java	(date 1607934512629)
@@ -0,0 +1,751 @@
+/*
+ * Copyright (C) 2007 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.example.android.notepad;
+
+import com.example.android.notepad.NotePad;
+
+import android.annotation.TargetApi;
+import android.content.ClipDescription;
+import android.content.ContentProvider;
+import android.content.ContentUris;
+import android.content.ContentValues;
+import android.content.Context;
+import android.content.UriMatcher;
+import android.content.ContentProvider.PipeDataWriter;
+import android.content.res.AssetFileDescriptor;
+import android.content.res.Resources;
+import android.database.Cursor;
+import android.database.SQLException;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+import android.database.sqlite.SQLiteQueryBuilder;
+import android.net.Uri;
+import android.os.Build;
+import android.os.Bundle;
+import android.os.ParcelFileDescriptor;
+import android.provider.LiveFolders;
+import android.text.TextUtils;
+import android.util.Log;
+
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.OutputStreamWriter;
+import java.io.PrintWriter;
+import java.io.UnsupportedEncodingException;
+import java.util.HashMap;
+
+/**
+ * Provides access to a database of notes. Each note has a title, the note
+ * itself, a creation date and a modified data.
+ */
+@TargetApi(Build.VERSION_CODES.HONEYCOMB)
+public class NotePadProvider extends ContentProvider implements PipeDataWriter<Cursor> {
+    // Used for debugging and logging
+    private static final String TAG = "NotePadProvider";
+
+    /**
+     * The database that the provider uses as its underlying data store
+     */
+    private static final String DATABASE_NAME = "note_pad.db";
+
+    /**
+     * The database version
+     */
+    private static final int DATABASE_VERSION = 2;
+
+    /**
+     * A projection map used to select columns from the database
+     */
+    private static HashMap<String, String> sNotesProjectionMap;
+
+    /**
+     * A projection map used to select columns from the database
+     */
+    private static HashMap<String, String> sLiveFolderProjectionMap;
+
+    /**
+     * Standard projection for the interesting columns of a normal note.
+     */
+    private static final String[] READ_NOTE_PROJECTION = new String[] {
+            NotePad.Notes._ID,               // Projection position 0, the note's id
+            NotePad.Notes.COLUMN_NAME_NOTE,  // Projection position 1, the note's content
+            NotePad.Notes.COLUMN_NAME_TITLE, // Projection position 2, the note's title
+    };
+    private static final int READ_NOTE_NOTE_INDEX = 1;
+    private static final int READ_NOTE_TITLE_INDEX = 2;
+
+    /*
+     * Constants used by the Uri matcher to choose an action based on the pattern
+     * of the incoming URI
+     */
+    // The incoming URI matches the Notes URI pattern
+    private static final int NOTES = 1;
+
+    // The incoming URI matches the Note ID URI pattern
+    private static final int NOTE_ID = 2;
+
+    // The incoming URI matches the Live Folder URI pattern
+    private static final int LIVE_FOLDER_NOTES = 3;
+
+    /**
+     * A UriMatcher instance
+     */
+    private static final UriMatcher sUriMatcher;
+
+    // Handle to a new DatabaseHelper.
+    private DatabaseHelper mOpenHelper;
+
+
+    /**
+     * A block that instantiates and sets static objects
+     */
+    static {
+
+        /*
+         * Creates and initializes the URI matcher
+         */
+        // Create a new instance
+        sUriMatcher = new UriMatcher(UriMatcher.NO_MATCH);
+
+        // Add a pattern that routes URIs terminated with "notes" to a NOTES operation
+        sUriMatcher.addURI(NotePad.AUTHORITY, "notes", NOTES);
+
+        // Add a pattern that routes URIs terminated with "notes" plus an integer
+        // to a note ID operation
+        sUriMatcher.addURI(NotePad.AUTHORITY, "notes/#", NOTE_ID);
+
+        // Add a pattern that routes URIs terminated with live_folders/notes to a
+        // live folder operation
+        sUriMatcher.addURI(NotePad.AUTHORITY, "live_folders/notes", LIVE_FOLDER_NOTES);
+
+        /*
+         * Creates and initializes a projection map that returns all columns
+         */
+
+        // Creates a new projection map instance. The map returns a column name
+        // given a string. The two are usually equal.
+        sNotesProjectionMap = new HashMap<String, String>();
+
+        // Maps the string "_ID" to the column name "_ID"
+        sNotesProjectionMap.put(NotePad.Notes._ID, NotePad.Notes._ID);
+
+        // Maps "title" to "title"
+        sNotesProjectionMap.put(NotePad.Notes.COLUMN_NAME_TITLE, NotePad.Notes.COLUMN_NAME_TITLE);
+
+        // Maps "note" to "note"
+        sNotesProjectionMap.put(NotePad.Notes.COLUMN_NAME_NOTE, NotePad.Notes.COLUMN_NAME_NOTE);
+
+        // Maps "created" to "created"
+        sNotesProjectionMap.put(NotePad.Notes.COLUMN_NAME_CREATE_DATE,
+                NotePad.Notes.COLUMN_NAME_CREATE_DATE);
+
+        // Maps "modified" to "modified"
+        sNotesProjectionMap.put(
+                NotePad.Notes.COLUMN_NAME_MODIFICATION_DATE,
+                NotePad.Notes.COLUMN_NAME_MODIFICATION_DATE);
+
+        /*
+         * Creates an initializes a projection map for handling Live Folders
+         */
+
+        // Creates a new projection map instance
+        sLiveFolderProjectionMap = new HashMap<String, String>();
+
+        // Maps "_ID" to "_ID AS _ID" for a live folder
+        sLiveFolderProjectionMap.put(LiveFolders._ID, NotePad.Notes._ID + " AS " + LiveFolders._ID);
+
+        // Maps "NAME" to "title AS NAME"
+        sLiveFolderProjectionMap.put(LiveFolders.NAME, NotePad.Notes.COLUMN_NAME_TITLE + " AS " +
+            LiveFolders.NAME);
+    }
+
+    /**
+    *
+    打开，升级，创建数据库
+    */
+   static class DatabaseHelper extends SQLiteOpenHelper {
+
+       DatabaseHelper(Context context) {
+           // calls the super constructor, requesting the default cursor factory.
+           super(context, DATABASE_NAME, null, DATABASE_VERSION);
+       }
+
+       /**
+        *
+        * Creates the underlying database with table name and column names taken from the
+        * NotePad class.
+        */
+       @Override
+       public void onCreate(SQLiteDatabase db) {
+           db.execSQL("CREATE TABLE " + NotePad.Notes.TABLE_NAME + " ("
+                   + NotePad.Notes._ID + " INTEGER PRIMARY KEY,"
+                   + NotePad.Notes.COLUMN_NAME_TITLE + " TEXT,"
+                   + NotePad.Notes.COLUMN_NAME_NOTE + " TEXT,"
+                   + NotePad.Notes.COLUMN_NAME_CREATE_DATE + " INTEGER,"
+                   + NotePad.Notes.COLUMN_NAME_MODIFICATION_DATE + " INTEGER"
+                   + ");");
+       }
+
+       /**
+        *升级数据库，回删除现有数据
+        */
+       @Override
+       public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+
+           // Logs that the database is being upgraded
+           Log.w(TAG, "Upgrading database from version " + oldVersion + " to "
+                   + newVersion + ", which will destroy all old data");
+
+           // Kills the table and existing data
+           db.execSQL("DROP TABLE IF EXISTS notes");
+
+           // Recreates the database with a new version
+           onCreate(db);
+       }
+   }
+
+   /**
+    通过创建新的DatabaseHelper初始化提供程序。当Android创建提供者以响应客户端的解析器请求时，调用onCreate()。
+    */
+   @Override
+   public boolean onCreate() {
+
+       Log.v("123","4");
+
+       // 创建一个新的助手对象。请注意，数据库本身不会被打开，直到有人试图访问它，并且只有当它不存在时才会创建它。
+       mOpenHelper = new DatabaseHelper(getContext());
+
+       // 假设任何失败都将由抛出的异常报告。
+       return true;
+   }
+
+   /**
+    * 此方法在客户端调用时被调用
+    * {@link android.content.ContentResolver#query(Uri, String[], String, String[], String)}.
+    * 查询数据库并返回包含结果的游标。
+    *
+    * @return 返回一个包含查询结果的游标。游标存在，但如果查询不返回结果或发生异常，则游标为空。
+    * @throws IllegalArgumentException 如果传入的URI模式无效则抛出异常
+    */
+   @Override
+   public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs,
+           String sortOrder) {
+       Log.v("123","2");
+       // 构造一个新的查询生成器并设置其表名
+       SQLiteQueryBuilder qb = new SQLiteQueryBuilder();
+       qb.setTables(NotePad.Notes.TABLE_NAME);
+
+       /**
+        * Choose the projection and adjust the "where" clause based on URI pattern-matching.
+        */
+       switch (sUriMatcher.match(uri)) {
+           // If the incoming URI is for notes, chooses the Notes projection
+           case NOTES:
+               qb.setProjectionMap(sNotesProjectionMap);
+               break;
+
+           /* If the incoming URI is for a single note identified by its ID, chooses the
+            * note ID projection, and appends "_ID = <noteID>" to the where clause, so that
+            * it selects that single note
+            */
+           case NOTE_ID:
+               qb.setProjectionMap(sNotesProjectionMap);
+               qb.appendWhere(
+                   NotePad.Notes._ID +    // the name of the ID column
+                   "=" +
+                   // the position of the note ID itself in the incoming URI
+                   uri.getPathSegments().get(NotePad.Notes.NOTE_ID_PATH_POSITION));
+               break;
+
+           case LIVE_FOLDER_NOTES:
+               // If the incoming URI is from a live folder, chooses the live folder projection.
+               qb.setProjectionMap(sLiveFolderProjectionMap);
+               break;
+
+           default:
+               // If the URI doesn't match any of the known patterns, throw an exception.
+               throw new IllegalArgumentException("Unknown URI " + uri);
+       }
+
+
+       String orderBy;
+       // If no sort order is specified, uses the default
+       if (TextUtils.isEmpty(sortOrder)) {
+           orderBy = NotePad.Notes.DEFAULT_SORT_ORDER;
+       } else {
+           // otherwise, uses the incoming sort order
+           orderBy = sortOrder;
+       }
+
+       // 在“读”模式下打开数据库对象，因为不需要写操作。
+       SQLiteDatabase db = mOpenHelper.getReadableDatabase();
+
+       /*
+        * Performs the query. If no problems occur trying to read the database, then a Cursor
+        * object is returned; otherwise, the cursor variable contains null. If no records were
+        * selected, then the Cursor object is empty, and Cursor.getCount() returns 0.
+        */
+       Cursor c = qb.query(
+           db,            // The database to query
+           projection,    // The columns to return from the query
+           selection,     // The columns for the where clause
+           selectionArgs, // The values for the where clause
+           null,          // don't group the rows
+           null,          // don't filter by row groups
+           orderBy        // The sort order
+       );
+
+       // Tells the Cursor what URI to watch, so it knows when its source data changes
+       c.setNotificationUri(getContext().getContentResolver(), uri);
+       return c;
+   }
+
+   /**
+    * This is called when a client calls {@link android.content.ContentResolver#getType(Uri)}.
+    * Returns the MIME data type of the URI given as a parameter.
+    *
+    * @param uri The URI whose MIME type is desired.
+    * @return The MIME type of the URI.
+    * @throws IllegalArgumentException if the incoming URI pattern is invalid.
+    */
+   @Override
+   public String getType(Uri uri) {
+
+       /**
+        * Chooses the MIME type based on the incoming URI pattern
+        */
+
+       Log.v("123","getType方法");
+
+       switch (sUriMatcher.match(uri)) {
+
+           // If the pattern is for notes or live folders, returns the general content type.
+           case NOTES:
+           case LIVE_FOLDER_NOTES:
+               return NotePad.Notes.CONTENT_TYPE;
+
+           // If the pattern is for note IDs, returns the note ID content type.
+           case NOTE_ID:
+               return NotePad.Notes.CONTENT_ITEM_TYPE;
+
+           // If the URI pattern doesn't match any permitted patterns, throws an exception.
+           default:
+               throw new IllegalArgumentException("Unknown URI " + uri);
+       }
+    }
+
+//BEGIN_INCLUDE(stream)
+    /**
+     * This describes the MIME types that are supported for opening a note
+     * URI as a stream.
+     */
+    static ClipDescription NOTE_STREAM_TYPES = new ClipDescription(null,
+            new String[] { ClipDescription.MIMETYPE_TEXT_PLAIN });
+
+    /**
+     * Returns the types of available data streams.  URIs to specific notes are supported.
+     * The application can convert such a note to a plain text stream.
+     *
+     * @param uri the URI to analyze
+     * @param mimeTypeFilter The MIME type to check for. This method only returns a data stream
+     * type for MIME types that match the filter. Currently, only text/plain MIME types match.
+     * @return a data stream MIME type. Currently, only text/plan is returned.
+     * @throws IllegalArgumentException if the URI pattern doesn't match any supported patterns.
+     */
+    @Override
+    public String[] getStreamTypes(Uri uri, String mimeTypeFilter) {
+        /**
+         *  Chooses the data stream type based on the incoming URI pattern.
+         */
+        Log.v("123","getStreamTypes方法");
+        switch (sUriMatcher.match(uri)) {
+
+            // If the pattern is for notes or live folders, return null. Data streams are not
+            // supported for this type of URI.
+            case NOTES:
+            case LIVE_FOLDER_NOTES:
+                return null;
+
+            // If the pattern is for note IDs and the MIME filter is text/plain, then return
+            // text/plain
+            case NOTE_ID:
+                return NOTE_STREAM_TYPES.filterMimeTypes(mimeTypeFilter);
+
+                // If the URI pattern doesn't match any permitted patterns, throws an exception.
+            default:
+                throw new IllegalArgumentException("Unknown URI " + uri);
+            }
+    }
+
+
+    /**
+     * Returns a stream of data for each supported stream type. This method does a query on the
+     * incoming URI, then uses
+     * {@link android.content.ContentProvider#openPipeHelper(Uri, String, Bundle, Object,
+     * PipeDataWriter)} to start another thread in which to convert the data into a stream.
+     *
+     * @param uri The URI pattern that points to the data stream
+     * @param mimeTypeFilter A String containing a MIME type. This method tries to get a stream of
+     * data with this MIME type.
+     * @param opts Additional options supplied by the caller.  Can be interpreted as
+     * desired by the content provider.
+     * @return AssetFileDescriptor A handle to the file.
+     * @throws FileNotFoundException if there is no file associated with the incoming URI.
+     */
+    @Override
+    public AssetFileDescriptor openTypedAssetFile(Uri uri, String mimeTypeFilter, Bundle opts)
+            throws FileNotFoundException {
+
+        // Checks to see if the MIME type filter matches a supported MIME type.
+        String[] mimeTypes = getStreamTypes(uri, mimeTypeFilter);
+
+        // If the MIME type is supported
+        if (mimeTypes != null) {
+
+            // Retrieves the note for this URI. Uses the query method defined for this provider,
+            // rather than using the database query method.
+            Cursor c = query(
+                    uri,                    // The URI of a note
+                    READ_NOTE_PROJECTION,   // Gets a projection containing the note's ID, title,
+                                            // and contents
+                    null,                   // No WHERE clause, get all matching records
+                    null,                   // Since there is no WHERE clause, no selection criteria
+                    null                    // Use the default sort order (modification date,
+                                            // descending
+            );
+
+            Log.v("123","openTypedAssetFile方法");
+
+            // If the query fails or the cursor is empty, stop
+            if (c == null || !c.moveToFirst()) {
+
+                // If the cursor is empty, simply close the cursor and return
+                if (c != null) {
+                    c.close();
+                }
+
+                // If the cursor is null, throw an exception
+                throw new FileNotFoundException("Unable to query " + uri);
+            }
+
+            // Start a new thread that pipes the stream data back to the caller.
+            return new AssetFileDescriptor(
+                    openPipeHelper(uri, mimeTypes[0], opts, c, this), 0,
+                    AssetFileDescriptor.UNKNOWN_LENGTH);
+        }
+
+        // If the MIME type is not supported, return a read-only handle to the file.
+        return super.openTypedAssetFile(uri, mimeTypeFilter, opts);
+    }
+
+    /**
+     * Implementation of {@link android.content.ContentProvider.PipeDataWriter}
+     * to perform the actual work of converting the data in one of cursors to a
+     * stream of data for the client to read.
+     */
+    @Override
+    public void writeDataToPipe(ParcelFileDescriptor output, Uri uri, String mimeType,
+            Bundle opts, Cursor c) {
+        // We currently only support conversion-to-text from a single note entry,
+        // so no need for cursor data type checking here.
+        FileOutputStream fout = new FileOutputStream(output.getFileDescriptor());
+        PrintWriter pw = null;
+        try {
+            pw = new PrintWriter(new OutputStreamWriter(fout, "UTF-8"));
+            pw.println(c.getString(READ_NOTE_TITLE_INDEX));
+            pw.println("");
+            pw.println(c.getString(READ_NOTE_NOTE_INDEX));
+        } catch (UnsupportedEncodingException e) {
+            Log.w(TAG, "Ooops", e);
+        } finally {
+            c.close();
+            if (pw != null) {
+                pw.flush();
+            }
+            try {
+                fout.close();
+            } catch (IOException e) {
+            }
+        }
+    }
+//END_INCLUDE(stream)
+
+    /**
+     * This is called when a client calls
+     * {@link android.content.ContentResolver#insert(Uri, ContentValues)}.
+     * Inserts a new row into the database. This method sets up default values for any
+     * columns that are not included in the incoming map.
+     * If rows were inserted, then listeners are notified of the change.
+     * @return The row ID of the inserted row.
+     * @throws SQLException if the insertion fails.
+     */
+    @Override
+    public Uri insert(Uri uri, ContentValues initialValues) {
+
+        // Validates the incoming URI. Only the full provider URI is allowed for inserts.
+        if (sUriMatcher.match(uri) != NOTES) {
+            throw new IllegalArgumentException("Unknown URI " + uri);
+        }
+
+        // A map to hold the new record's values.
+        ContentValues values;
+
+        // If the incoming values map is not null, uses it for the new values.
+        if (initialValues != null) {
+            values = new ContentValues(initialValues);
+
+        } else {
+            // Otherwise, create a new value map
+            values = new ContentValues();
+        }
+
+        // Gets the current system time in milliseconds
+        Long now = Long.valueOf(System.currentTimeMillis());
+
+        // If the values map doesn't contain the creation date, sets the value to the current time.
+        if (values.containsKey(NotePad.Notes.COLUMN_NAME_CREATE_DATE) == false) {
+            values.put(NotePad.Notes.COLUMN_NAME_CREATE_DATE, now);
+        }
+
+        // If the values map doesn't contain the modification date, sets the value to the current
+        // time.
+        if (values.containsKey(NotePad.Notes.COLUMN_NAME_MODIFICATION_DATE) == false) {
+            values.put(NotePad.Notes.COLUMN_NAME_MODIFICATION_DATE, now);
+        }
+
+        // If the values map doesn't contain a title, sets the value to the default title.
+        if (values.containsKey(NotePad.Notes.COLUMN_NAME_TITLE) == false) {
+            Resources r = Resources.getSystem();
+            values.put(NotePad.Notes.COLUMN_NAME_TITLE, r.getString(android.R.string.untitled));
+        }
+
+        // If the values map doesn't contain note text, sets the value to an empty string.
+        if (values.containsKey(NotePad.Notes.COLUMN_NAME_NOTE) == false) {
+            values.put(NotePad.Notes.COLUMN_NAME_NOTE, "");
+        }
+
+        // Opens the database object in "write" mode.
+        SQLiteDatabase db = mOpenHelper.getWritableDatabase();
+
+        // Performs the insert and returns the ID of the new note.
+        long rowId = db.insert(
+            NotePad.Notes.TABLE_NAME,        // The table to insert into.
+            NotePad.Notes.COLUMN_NAME_NOTE,  // A hack, SQLite sets this column value to null
+                                             // if values is empty.
+            values                           // A map of column names, and the values to insert
+                                             // into the columns.
+        );
+
+        // If the insert succeeded, the row ID exists.
+        if (rowId > 0) {
+            // Creates a URI with the note ID pattern and the new row ID appended to it.
+            Uri noteUri = ContentUris.withAppendedId(NotePad.Notes.CONTENT_ID_URI_BASE, rowId);
+
+            // Notifies observers registered against this provider that the data changed.
+            getContext().getContentResolver().notifyChange(noteUri, null);
+            return noteUri;
+        }
+
+        // If the insert didn't succeed, then the rowID is <= 0. Throws an exception.
+        throw new SQLException("Failed to insert row into " + uri);
+    }
+
+    /**
+     * This is called when a client calls
+     * {@link android.content.ContentResolver#delete(Uri, String, String[])}.
+     * Deletes records from the database. If the incoming URI matches the note ID URI pattern,
+     * this method deletes the one record specified by the ID in the URI. Otherwise, it deletes a
+     * a set of records. The record or records must also match the input selection criteria
+     * specified by where and whereArgs.
+     *
+     * If rows were deleted, then listeners are notified of the change.
+     * @return If a "where" clause is used, the number of rows affected is returned, otherwise
+     * 0 is returned. To delete all rows and get a row count, use "1" as the where clause.
+     * @throws IllegalArgumentException if the incoming URI pattern is invalid.
+     */
+    @Override
+    public int delete(Uri uri, String where, String[] whereArgs) {
+
+        // Opens the database object in "write" mode.
+        SQLiteDatabase db = mOpenHelper.getWritableDatabase();
+        String finalWhere;
+
+        int count;
+
+        // Does the delete based on the incoming URI pattern.
+        switch (sUriMatcher.match(uri)) {
+
+            // If the incoming pattern matches the general pattern for notes, does a delete
+            // based on the incoming "where" columns and arguments.
+            case NOTES:
+                count = db.delete(
+                    NotePad.Notes.TABLE_NAME,  // The database table name
+                    where,                     // The incoming where clause column names
+                    whereArgs                  // The incoming where clause values
+                );
+                break;
+
+                // If the incoming URI matches a single note ID, does the delete based on the
+                // incoming data, but modifies the where clause to restrict it to the
+                // particular note ID.
+            case NOTE_ID:
+                /*
+                 * Starts a final WHERE clause by restricting it to the
+                 * desired note ID.
+                 */
+                finalWhere =
+                        NotePad.Notes._ID +                              // The ID column name
+                        " = " +                                          // test for equality
+                        uri.getPathSegments().                           // the incoming note ID
+                            get(NotePad.Notes.NOTE_ID_PATH_POSITION)
+                ;
+
+                // If there were additional selection criteria, append them to the final
+                // WHERE clause
+                if (where != null) {
+                    finalWhere = finalWhere + " AND " + where;
+                }
+
+                // Performs the delete.
+                count = db.delete(
+                    NotePad.Notes.TABLE_NAME,  // The database table name.
+                    finalWhere,                // The final WHERE clause
+                    whereArgs                  // The incoming where clause values.
+                );
+                break;
+
+            // If the incoming pattern is invalid, throws an exception.
+            default:
+                throw new IllegalArgumentException("Unknown URI " + uri);
+        }
+
+        /*Gets a handle to the content resolver object for the current context, and notifies it
+         * that the incoming URI changed. The object passes this along to the resolver framework,
+         * and observers that have registered themselves for the provider are notified.
+         */
+        getContext().getContentResolver().notifyChange(uri, null);
+
+        // Returns the number of rows deleted.
+        return count;
+    }
+
+    /**
+     * This is called when a client calls
+     * {@link android.content.ContentResolver#update(Uri,ContentValues,String,String[])}
+     * Updates records in the database. The column names specified by the keys in the values map
+     * are updated with new data specified by the values in the map. If the incoming URI matches the
+     * note ID URI pattern, then the method updates the one record specified by the ID in the URI;
+     * otherwise, it updates a set of records. The record or records must match the input
+     * selection criteria specified by where and whereArgs.
+     * If rows were updated, then listeners are notified of the change.
+     *
+     * @param uri The URI pattern to match and update.
+     * @param values A map of column names (keys) and new values (values).
+     * @param where An SQL "WHERE" clause that selects records based on their column values. If this
+     * is null, then all records that match the URI pattern are selected.
+     * @param whereArgs An array of selection criteria. If the "where" param contains value
+     * placeholders ("?"), then each placeholder is replaced by the corresponding element in the
+     * array.
+     * @return The number of rows updated.
+     * @throws IllegalArgumentException if the incoming URI pattern is invalid.
+     */
+    @Override
+    public int update(Uri uri, ContentValues values, String where, String[] whereArgs) {
+
+        // Opens the database object in "write" mode.
+        SQLiteDatabase db = mOpenHelper.getWritableDatabase();
+        int count;
+        String finalWhere;
+
+        // Does the update based on the incoming URI pattern
+        switch (sUriMatcher.match(uri)) {
+
+            // If the incoming URI matches the general notes pattern, does the update based on
+            // the incoming data.
+            case NOTES:
+
+                // Does the update and returns the number of rows updated.
+                count = db.update(
+                    NotePad.Notes.TABLE_NAME, // The database table name.
+                    values,                   // A map of column names and new values to use.
+                    where,                    // The where clause column names.
+                    whereArgs                 // The where clause column values to select on.
+                );
+                break;
+
+            // If the incoming URI matches a single note ID, does the update based on the incoming
+            // data, but modifies the where clause to restrict it to the particular note ID.
+            case NOTE_ID:
+                // From the incoming URI, get the note ID
+                String noteId = uri.getPathSegments().get(NotePad.Notes.NOTE_ID_PATH_POSITION);
+
+                /*
+                 * Starts creating the final WHERE clause by restricting it to the incoming
+                 * note ID.
+                 */
+                finalWhere =
+                        NotePad.Notes._ID +                              // The ID column name
+                        " = " +                                          // test for equality
+                        uri.getPathSegments().                           // the incoming note ID
+                            get(NotePad.Notes.NOTE_ID_PATH_POSITION)
+                ;
+
+                // If there were additional selection criteria, append them to the final WHERE
+                // clause
+                if (where !=null) {
+                    finalWhere = finalWhere + " AND " + where;
+                }
+
+
+                // Does the update and returns the number of rows updated.
+                count = db.update(
+                    NotePad.Notes.TABLE_NAME, // The database table name.
+                    values,                   // A map of column names and new values to use.
+                    finalWhere,               // The final WHERE clause to use
+                                              // placeholders for whereArgs
+                    whereArgs                 // The where clause column values to select on, or
+                                              // null if the values are in the where argument.
+                );
+                break;
+            // If the incoming pattern is invalid, throws an exception.
+            default:
+                throw new IllegalArgumentException("Unknown URI " + uri);
+        }
+
+        /*Gets a handle to the content resolver object for the current context, and notifies it
+         * that the incoming URI changed. The object passes this along to the resolver framework,
+         * and observers that have registered themselves for the provider are notified.
+         */
+        getContext().getContentResolver().notifyChange(uri, null);
+
+        // Returns the number of rows updated.
+        return count;
+    }
+
+    /**
+     * A test package can call this to get a handle to the database underlying NotePadProvider,
+     * so it can insert test data into the database. The test case class is responsible for
+     * instantiating the provider in a test context; {@link android.test.ProviderTestCase2} does
+     * this during the call to setUp()
+     *
+     * @return a handle to the database helper object for the provider's data.
+     */
+    DatabaseHelper getOpenHelperForTest() {
+        return mOpenHelper;
+    }
+}
Index: app/src/main/java/com/example/android/notepad/TitleEditor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/android/notepad/TitleEditor.java	(date 1608017061084)
+++ app/src/main/java/com/example/android/notepad/TitleEditor.java	(date 1608017061084)
@@ -0,0 +1,172 @@
+/*
+ * Copyright (C) 2007 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.example.android.notepad;
+
+import android.app.Activity;
+import android.content.ContentValues;
+import android.database.Cursor;
+import android.net.Uri;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.View;
+import android.widget.EditText;
+
+/**
+ * This Activity allows the user to edit a note's title. It displays a floating window
+ * containing an EditText.
+ *
+ * NOTE: Notice that the provider operations in this Activity are taking place on the UI thread.
+ * This is not a good practice. It is only done here to make the code more readable. A real
+ * application should use the {@link android.content.AsyncQueryHandler}
+ * or {@link android.os.AsyncTask} object to perform operations asynchronously on a separate thread.
+ */
+public class TitleEditor extends Activity {
+
+    /**
+     * This is a special intent action that means "edit the title of a note".
+     */
+    public static final String EDIT_TITLE_ACTION = "com.android.notepad.action.EDIT_TITLE";
+
+    // Creates a projection that returns the note ID and the note contents.
+    private static final String[] PROJECTION = new String[] {
+            NotePad.Notes._ID, // 0
+            NotePad.Notes.COLUMN_NAME_TITLE, // 1
+    };
+
+    // The position of the title column in a Cursor returned by the provider.
+    private static final int COLUMN_INDEX_TITLE = 1;
+
+    // A Cursor object that will contain the results of querying the provider for a note.
+    private Cursor mCursor;
+
+    // An EditText object for preserving the edited title.
+    private EditText mText;
+
+    // A URI object for the note whose title is being edited.
+    private Uri mUri;
+
+    /**
+     * This method is called by Android when the Activity is first started. From the incoming
+     * Intent, it determines what kind of editing is desired, and then does it.
+     */
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        // Set the View for this Activity object's UI.
+        setContentView(R.layout.title_editor);
+
+        // Get the Intent that activated this Activity, and from it get the URI of the note whose
+        // title we need to edit.
+        mUri = getIntent().getData();
+
+
+        Log.v("123", String.valueOf(mUri));
+
+
+        /*
+         * Using the URI passed in with the triggering Intent, gets the note.
+         *
+         * Note: This is being done on the UI thread. It will block the thread until the query
+         * completes. In a sample app, going against a simple provider based on a local database,
+         * the block will be momentary, but in a real app you should use
+         * android.content.AsyncQueryHandler or android.os.AsyncTask.
+         */
+
+        mCursor = managedQuery(
+            mUri,        // The URI for the note that is to be retrieved.
+            PROJECTION,  // The columns to retrieve
+            null,        // No selection criteria are used, so no where columns are needed.
+            null,        // No where columns are used, so no where values are needed.
+            null         // No sort order is needed.
+        );
+
+        // Gets the View ID for the EditText box
+        mText = (EditText) this.findViewById(R.id.title);
+    }
+
+    /**
+     * This method is called when the Activity is about to come to the foreground. This happens
+     * when the Activity comes to the top of the task stack, OR when it is first starting.
+     *
+     * Displays the current title for the selected note.
+     */
+    @Override
+    protected void onResume() {
+        super.onResume();
+
+        // Verifies that the query made in onCreate() actually worked. If it worked, then the
+        // Cursor object is not null. If it is *empty*, then mCursor.getCount() == 0.
+        if (mCursor != null) {
+
+            // The Cursor was just retrieved, so its index is set to one record *before* the first
+            // record retrieved. This moves it to the first record.
+            mCursor.moveToFirst();
+
+            // Displays the current title text in the EditText object.
+            mText.setText(mCursor.getString(COLUMN_INDEX_TITLE));
+        }
+    }
+
+    /**
+     * This method is called when the Activity loses focus.
+     *
+     * For Activity objects that edit information, onPause() may be the one place where changes are
+     * saved. The Android application model is predicated on the idea that "save" and "exit" aren't
+     * required actions. When users navigate away from an Activity, they shouldn't have to go back
+     * to it to complete their work. The act of going away should save everything and leave the
+     * Activity in a state where Android can destroy it if necessary.
+     *
+     * Updates the note with the text currently in the text box.
+     */
+    @Override
+    protected void onPause() {
+        super.onPause();
+
+        // Verifies that the query made in onCreate() actually worked. If it worked, then the
+        // Cursor object is not null. If it is *empty*, then mCursor.getCount() == 0.
+
+        if (mCursor != null) {
+
+            // Creates a values map for updating the provider.
+            ContentValues values = new ContentValues();
+
+            // In the values map, sets the title to the current contents of the edit box.
+            values.put(NotePad.Notes.COLUMN_NAME_TITLE, mText.getText().toString());
+
+            /*
+             * Updates the provider with the note's new title.
+             *
+             * Note: This is being done on the UI thread. It will block the thread until the
+             * update completes. In a sample app, going against a simple provider based on a
+             * local database, the block will be momentary, but in a real app you should use
+             * android.content.AsyncQueryHandler or android.os.AsyncTask.
+             */
+            getContentResolver().update(
+                mUri,    // The URI for the note to update.
+                values,  // The values map containing the columns to update and the values to use.
+                null,    // No selection criteria is used, so no "where" columns are needed.
+                null     // No "where" columns are used, so no "where" values are needed.
+            );
+
+        }
+    }
+
+    public void onClickOk(View v) {
+        finish();
+    }
+}
Index: app/src/main/java/com/example/android/notepad/NotePad.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/android/notepad/NotePad.java	(date 1607410857137)
+++ app/src/main/java/com/example/android/notepad/NotePad.java	(date 1607410857137)
@@ -0,0 +1,129 @@
+/*
+ * Copyright (C) 2007 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.example.android.notepad;
+
+import android.net.Uri;
+import android.provider.BaseColumns;
+
+/**
+ * Defines a contract between the Note Pad content provider and its clients. A contract defines the
+ * information that a client needs to access the provider as one or more data tables. A contract
+ * is a public, non-extendable (final) class that contains constants defining column names and
+ * URIs. A well-written client depends only on the constants in the contract.
+ */
+public final class NotePad {
+    public static final String AUTHORITY = "com.google.provider.NotePad";
+    private NotePad() {
+    }
+
+    /**
+     * Notes table contract
+     */
+    public static final class Notes implements BaseColumns {
+
+        // This class cannot be instantiated
+        private Notes() {}
+
+        /*
+         * 表名
+         * */
+        public static final String TABLE_NAME = "notes";
+
+        /**
+         * 列名
+         */
+        public static final String COLUMN_NAME_TITLE = "title";    //标题
+        public static final String COLUMN_NAME_NOTE = "note";       //内容
+        public static final String COLUMN_NAME_CREATE_DATE = "created";     //创建日期
+        public static final String COLUMN_NAME_MODIFICATION_DATE = "modified";      //修改日期
+
+        /**
+         * The scheme part for this provider's URI
+         */
+        private static final String SCHEME = "content://";
+
+        /**
+         * Path parts for the URIs
+         */
+
+        /**
+         * Path part for the Notes URI
+         */
+        private static final String PATH_NOTES = "/notes";
+
+        /**
+         * Path part for the Note ID URI
+         */
+        private static final String PATH_NOTE_ID = "/notes/";
+
+        /**
+         * 0-relative position of a note ID segment in the path part of a note ID URI
+         */
+        public static final int NOTE_ID_PATH_POSITION = 1;
+
+        /**
+         * Path part for the Live Folder URI
+         */
+        private static final String PATH_LIVE_FOLDER = "/live_folders/notes";
+
+        /**
+         * The content:// style URL for this table
+         */
+        public static final Uri CONTENT_URI =  Uri.parse(SCHEME + AUTHORITY + PATH_NOTES);
+
+        /**
+         * The content URI base for a single note. Callers must
+         * append a numeric note id to this Uri to retrieve a note
+         */
+        public static final Uri CONTENT_ID_URI_BASE
+                = Uri.parse(SCHEME + AUTHORITY + PATH_NOTE_ID);
+
+        /**
+         * The content URI match pattern for a single note, specified by its ID. Use this to match
+         * incoming URIs or to construct an Intent.
+         */
+        public static final Uri CONTENT_ID_URI_PATTERN
+                = Uri.parse(SCHEME + AUTHORITY + PATH_NOTE_ID + "/#");
+
+        /**
+         * The content Uri pattern for a notes listing for live folders
+         */
+        public static final Uri LIVE_FOLDER_URI
+                = Uri.parse(SCHEME + AUTHORITY + PATH_LIVE_FOLDER);
+
+        /*
+         * MIME type definitions
+         */
+
+        /**
+         * The MIME type of {@link #CONTENT_URI} providing a directory of notes.
+         */
+        public static final String CONTENT_TYPE = "vnd.android.cursor.dir/vnd.google.note";
+
+        /**
+         * The MIME type of a {@link #CONTENT_URI} sub-directory of a single
+         * note.
+         */
+        public static final String CONTENT_ITEM_TYPE = "vnd.android.cursor.item/vnd.google.note";
+
+        /**
+         * The default sort order for this table
+         */
+        public static final String DEFAULT_SORT_ORDER = "modified DESC";
+
+    }
+}
Index: app/src/main/java/com/example/android/notepad/NotesLiveFolder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/android/notepad/NotesLiveFolder.java	(date 1588734750000)
+++ app/src/main/java/com/example/android/notepad/NotesLiveFolder.java	(date 1588734750000)
@@ -0,0 +1,113 @@
+/*
+ * Copyright (C) 2009 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.example.android.notepad;
+
+import com.example.android.notepad.NotePad;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.content.Intent.ShortcutIconResource;
+import android.os.Bundle;
+import android.provider.LiveFolders;
+
+/**
+ * This Activity creates a live folder Intent and
+ * sends it back to HOME. From the data in the Intent, HOME creates a live folder and displays
+ * its icon in the Home view.
+ * When the user clicks the icon, Home uses the data it got from the Intent to retrieve information
+ * from a content provider and display it in a View.
+ *
+ * The intent filter for this Activity is set to ACTION_CREATE_LIVE_FOLDER, which
+ * HOME sends in response to a long press and selection of Live Folder.
+ */
+public class NotesLiveFolder extends Activity {
+
+    /**
+     * All of the work is done in onCreate(). The Activity doesn't actually display a UI.
+     * Instead, it sets up an Intent and returns it to its caller (the HOME activity).
+     */
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        /*
+         * Gets the incoming Intent and its action. If the incoming Intent was
+         * ACTION_CREATE_LIVE_FOLDER, then create an outgoing Intent with the
+         * necessary data and send back OK. Otherwise, send back CANCEL.
+         */
+        final Intent intent = getIntent();
+        final String action = intent.getAction();
+
+        if (LiveFolders.ACTION_CREATE_LIVE_FOLDER.equals(action)) {
+
+            // Creates a new Intent.
+            final Intent liveFolderIntent = new Intent();
+
+            /*
+             * The following statements put data into the outgoing Intent. Please see
+             * {@link android.provider.LiveFolders for a detailed description of these
+             * data values. From this data, HOME sets up a live folder.
+             */
+            // Sets the URI pattern for the content provider backing the folder.
+            liveFolderIntent.setData(NotePad.Notes.LIVE_FOLDER_URI);
+
+            // Adds the display name of the live folder as an Extra string.
+            String foldername = getString(R.string.live_folder_name);
+            liveFolderIntent.putExtra(LiveFolders.EXTRA_LIVE_FOLDER_NAME, foldername);
+
+            // Adds the display icon of the live folder as an Extra resource.
+            ShortcutIconResource foldericon =
+                Intent.ShortcutIconResource.fromContext(this, R.drawable.live_folder_notes);
+            liveFolderIntent.putExtra(LiveFolders.EXTRA_LIVE_FOLDER_ICON, foldericon);
+
+            // Add the display mode of the live folder as an integer. The specified
+            // mode causes the live folder to display as a list.
+            liveFolderIntent.putExtra(
+                    LiveFolders.EXTRA_LIVE_FOLDER_DISPLAY_MODE,
+                    LiveFolders.DISPLAY_MODE_LIST);
+
+            /*
+             * Adds a base action for items in the live folder list, as an Intent. When the
+             * user clicks an individual note in the list, the live folder fires this Intent.
+             *
+             * Its action is ACTION_EDIT, so it triggers the Note Editor activity. Its
+             * data is the URI pattern for a single note identified by its ID. The live folder
+             * automatically adds the ID value of the selected item to the URI pattern.
+             *
+             * As a result, Note Editor is triggered and gets a single note to retrieve by ID.
+             */
+            Intent returnIntent
+                    = new Intent(Intent.ACTION_EDIT, NotePad.Notes.CONTENT_ID_URI_PATTERN);
+            liveFolderIntent.putExtra(LiveFolders.EXTRA_LIVE_FOLDER_BASE_INTENT, returnIntent);
+
+            /* Creates an ActivityResult object to propagate back to HOME. Set its result indicator
+             * to OK, and sets the returned Intent to the live folder Intent that was just
+             * constructed.
+             */
+            setResult(RESULT_OK, liveFolderIntent);
+
+        } else {
+
+            // If the original action was not ACTION_CREATE_LIVE_FOLDER, creates an
+            // ActivityResult with the indicator set to CANCELED, but do not return an Intent
+            setResult(RESULT_CANCELED);
+        }
+
+        // Closes the Activity. The ActivityObject is propagated back to the caller.
+        finish();
+    }
+}
Index: app/src/androidTest/java/com/example/android/notepad/NotePadActivityTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/androidTest/java/com/example/android/notepad/NotePadActivityTest.java	(date 1588734750000)
+++ app/src/androidTest/java/com/example/android/notepad/NotePadActivityTest.java	(date 1588734750000)
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.example.android.notepad;
+
+import android.test.ActivityInstrumentationTestCase2;
+import com.example.android.notepad.NotesList;
+
+/**
+ * Make sure that the main launcher activity opens up properly, which will be
+ * verified by {@link #testActivityTestCaseSetUpProperly}.
+ */
+public class NotePadActivityTest extends ActivityInstrumentationTestCase2<NotesList> {
+
+    /**
+     * Creates an {@link ActivityInstrumentationTestCase2} for the {@link NotesList} activity.
+     */
+    public NotePadActivityTest() {
+        super(NotesList.class);
+    }
+
+    /**
+     * Verifies that the activity under test can be launched.
+     */
+    public void testActivityTestCaseSetUpProperly() {
+        assertNotNull("activity should be launched successfully", getActivity());
+    }
+}
Index: app/src/androidTest/java/com/example/android/notepad/NotePadProviderTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/androidTest/java/com/example/android/notepad/NotePadProviderTest.java	(date 1588734750000)
+++ app/src/androidTest/java/com/example/android/notepad/NotePadProviderTest.java	(date 1588734750000)
@@ -0,0 +1,839 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.example.android.notepad;
+
+import android.content.ContentUris;
+import android.content.ContentValues;
+import android.content.res.AssetFileDescriptor;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.net.Uri;
+import android.os.ParcelFileDescriptor;
+import android.test.ProviderTestCase2;
+import android.test.mock.MockContentResolver;
+
+import java.io.BufferedReader;
+import java.io.FileDescriptor;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.IOException;
+import java.util.Calendar;
+import java.util.GregorianCalendar;
+
+/*
+ */
+/**
+ * This class tests the content provider for the Note Pad sample application.
+ *
+ * To learn how to run an entire test package or one of its classes, please see
+ * "Testing in Eclipse, with ADT" or "Testing in Other IDEs" in the Developer Guide.
+ */
+public class NotePadProviderTest extends ProviderTestCase2<NotePadProvider> {
+
+    // A URI that the provider does not offer, for testing error handling.
+    private static final Uri INVALID_URI =
+        Uri.withAppendedPath(NotePad.Notes.CONTENT_URI, "invalid");
+
+    // Contains a reference to the mocked content resolver for the provider under test.
+    private MockContentResolver mMockResolver;
+
+    // Contains an SQLite database, used as test data
+    private SQLiteDatabase mDb;
+
+    // Contains the test data, as an array of NoteInfo instances.
+    private final NoteInfo[] TEST_NOTES = {
+        new NoteInfo("Note0", "This is note 0"),
+        new NoteInfo("Note1", "This is note 1"),
+        new NoteInfo("Note2", "This is note 2"),
+        new NoteInfo("Note3", "This is note 3"),
+        new NoteInfo("Note4", "This is note 4"),
+        new NoteInfo("Note5", "This is note 5"),
+        new NoteInfo("Note6", "This is note 6"),
+        new NoteInfo("Note7", "This is note 7"),
+        new NoteInfo("Note8", "This is note 8"),
+        new NoteInfo("Note9", "This is note 9") };
+
+    // Number of milliseconds in one day (milliseconds * seconds * minutes * hours)
+    private static final long ONE_DAY_MILLIS = 1000 * 60 * 60 * 24;
+
+    // Number of milliseconds in one week
+    private static final long ONE_WEEK_MILLIS = ONE_DAY_MILLIS * 7;
+
+    // Creates a calendar object equal to January 1, 2010 at 12 midnight
+    private static final GregorianCalendar TEST_CALENDAR =
+        new GregorianCalendar(2010, Calendar.JANUARY, 1, 0, 0, 0);
+
+    // Stores a timestamp value, set to an arbitrary starting point
+    private final static long START_DATE = TEST_CALENDAR.getTimeInMillis();
+
+    // Sets a MIME type filter, used to test provider methods that return more than one MIME type
+    // for a particular note. The filter will retrieve any MIME types supported for the content URI.
+    private final static String MIME_TYPES_ALL = "*/*";
+
+    // Sets a MIME type filter, used to test provider methods that return more than one MIME type
+    // for a particular note. The filter is nonsense, so it will not retrieve any MIME types.
+    private final static String MIME_TYPES_NONE = "qwer/qwer";
+
+    // Sets a MIME type filter for plain text, used to the provider's methods that only handle
+    // plain text
+    private final static String MIME_TYPE_TEXT = "text/plain";
+
+    /*
+     * Constructor for the test case class.
+     * Calls the super constructor with the class name of the provider under test and the
+     * authority name of the provider.
+     */
+    public NotePadProviderTest() {
+        super(NotePadProvider.class, NotePad.AUTHORITY);
+    }
+
+    /*
+     * Sets up the test environment before each test method. Creates a mock content resolver,
+     * gets the provider under test, and creates a new database for the provider.
+     */
+    @Override
+    protected void setUp() throws Exception {
+        // Calls the base class implementation of this method.
+        super.setUp();
+
+        // Gets the resolver for this test.
+        mMockResolver = getMockContentResolver();
+
+        /*
+         * Gets a handle to the database underlying the provider. Gets the provider instance
+         * created in super.setUp(), gets the DatabaseOpenHelper for the provider, and gets
+         * a database object from the helper.
+         */
+        mDb = getProvider().getOpenHelperForTest().getWritableDatabase();
+    }
+
+    /*
+     *  This method is called after each test method, to clean up the current fixture. Since
+     *  this sample test case runs in an isolated context, no cleanup is necessary.
+     */
+    @Override
+    protected void tearDown() throws Exception {
+        super.tearDown();
+    }
+
+    /*
+     * Sets up test data.
+     * The test data is in an SQL database. It is created in setUp() without any data,
+     * and populated in insertData if necessary.
+     */
+    private void insertData() {
+        // Creates an instance of the ContentValues map type expected by database insertions
+        ContentValues values = new ContentValues();
+
+        // Sets up test data
+        for (int index = 0; index < TEST_NOTES.length; index++) {
+
+            // Set the creation and modification date for the note
+            TEST_NOTES[index].setCreationDate(START_DATE + (index * ONE_DAY_MILLIS));
+            TEST_NOTES[index].setModificationDate(START_DATE + (index * ONE_WEEK_MILLIS));
+
+            // Adds a record to the database.
+            mDb.insertOrThrow(
+                NotePad.Notes.TABLE_NAME,             // the table name for the insert
+                NotePad.Notes.COLUMN_NAME_TITLE,      // column set to null if empty values map
+                TEST_NOTES[index].getContentValues()  // the values map to insert
+            );
+        }
+    }
+
+    /*
+     * Tests the provider's publicly available URIs. If the URI is not one that the provider
+     * understands, the provider should throw an exception. It also tests the provider's getType()
+     * method for each URI, which should return the MIME type associated with the URI.
+     */
+    public void testUriAndGetType() {
+        // Tests the MIME type for the notes table URI.
+        String mimeType = mMockResolver.getType(NotePad.Notes.CONTENT_URI);
+        assertEquals(NotePad.Notes.CONTENT_TYPE, mimeType);
+
+        // Tests the MIME type for the live folder URI.
+        mimeType = mMockResolver.getType(NotePad.Notes.LIVE_FOLDER_URI);
+        assertEquals(NotePad.Notes.CONTENT_TYPE, mimeType);
+
+        // Creates a URI with a pattern for note ids. The id doesn't have to exist.
+        Uri noteIdUri = ContentUris.withAppendedId(NotePad.Notes.CONTENT_ID_URI_BASE, 1);
+
+        // Gets the note ID URI MIME type.
+        mimeType = mMockResolver.getType(noteIdUri);
+        assertEquals(NotePad.Notes.CONTENT_ITEM_TYPE, mimeType);
+
+        // Tests an invalid URI. This should throw an IllegalArgumentException.
+        mimeType = mMockResolver.getType(INVALID_URI);
+    }
+
+    /*
+     * Tests the provider's stream MIME types returned by getStreamTypes(). If the provider supports
+     * stream data for the URI, the MIME type is returned. Otherwise, the provider returns null.
+     */
+    public void testGetStreamTypes() {
+
+        // Tests the notes table URI. This should return null, since the content provider does
+        // not provide a stream MIME type for multiple notes.
+        assertNull(mMockResolver.getStreamTypes(NotePad.Notes.CONTENT_URI, MIME_TYPES_ALL));
+
+        // Tests the live folders URI. This should return null, since the content provider does not
+        // provide a stream MIME type for multiple notes.
+        assertNull(mMockResolver.getStreamTypes(NotePad.Notes.LIVE_FOLDER_URI, MIME_TYPES_ALL));
+
+        /*
+         * Tests the note id URI for a single note, using _ID value "1" which is a valid ID. Uses a
+         * valid MIME type filter that will return all the supported MIME types for a content URI.
+         * The result should be "text/plain".
+         */
+
+        // Constructs the note id URI
+        Uri testUri = Uri.withAppendedPath(NotePad.Notes.CONTENT_ID_URI_BASE, "1");
+
+        // Gets the MIME types for the URI, with the filter that selects all MIME types.
+        String mimeType[] = mMockResolver.getStreamTypes(testUri, MIME_TYPES_ALL);
+
+        // Tests that the result is not null and is equal to the expected value. Also tests that
+        // only one MIME type is returned.
+        assertNotNull(mimeType);
+        assertEquals(mimeType[0],"text/plain");
+        assertEquals(mimeType.length,1);
+
+        /*
+         * Tests with the same URI but with a filter that should not return any URIs.
+         */
+        mimeType = mMockResolver.getStreamTypes(testUri, MIME_TYPES_NONE);
+        assertNull(mimeType);
+
+        /*
+         * Tests with a URI that should not have any associated stream MIME types, but with a
+         * filter that returns all types. The result should still be null.
+         */
+        mimeType = mMockResolver.getStreamTypes(NotePad.Notes.CONTENT_URI, MIME_TYPES_ALL);
+        assertNull(mimeType);
+
+    }
+
+    /*
+     * Tests the provider's public API for opening a read-only pipe of data for a note ID URI
+     * and MIME type filter matching "text/plain".
+     * This method throws a FileNotFoundException if the URI isn't for a note ID or the MIME type
+     * filter isn't "text/plain". It throws an IOException if it can't close a file descriptor.
+     */
+    public void testOpenTypedAssetFile() throws FileNotFoundException, IOException {
+
+        // A URI to contain a note ID content URI.
+        Uri testNoteIdUri;
+
+        // A handle for the file descriptor returned by openTypedAssetFile().
+        AssetFileDescriptor testAssetDescriptor;
+
+        // Inserts data into the provider, so that the note ID URI will be recognized.
+        insertData();
+
+        // Constructs a URI with a note ID of 1. This matches the note ID URI pattern that
+        // openTypedAssetFile can handle.
+        testNoteIdUri = ContentUris.withAppendedId(NotePad.Notes.CONTENT_ID_URI_BASE, 1);
+
+        // Opens the pipe. The opts argument is for passing options from a caller to the provider,
+        // but the NotePadProvider does not use it.
+        testAssetDescriptor = mMockResolver.openTypedAssetFileDescriptor(
+                testNoteIdUri,         // the URI for a single note. The pipe points to this
+                                       // note's data
+                MIME_TYPE_TEXT,        // a MIME type of "text/plain"
+                null                   // the "opts" argument
+        );
+
+        // Gets the parcel file handle from the asset file handle.
+        ParcelFileDescriptor testParcelDescriptor = testAssetDescriptor.getParcelFileDescriptor();
+
+        // Gets the file handle from the asset file handle.
+        FileDescriptor testDescriptor = testAssetDescriptor.getFileDescriptor();
+
+        // Tests that the asset file handle is not null.
+        assertNotNull(testAssetDescriptor);
+
+        // Tests that the parcel file handle is not null.
+        assertNotNull(testParcelDescriptor);
+
+        // Tests that the file handle is not null.
+        assertNotNull(testDescriptor);
+
+        // Tests that the file handle is valid.
+        assertTrue(testDescriptor.valid());
+
+        // Closes the file handles.
+        testParcelDescriptor.close();
+        testAssetDescriptor.close();
+
+        /*
+         * Changes the URI to a notes URI for multiple notes, and re-test. This should fail, since
+         * the provider does not support this type of URI. A FileNotFound exception is expected,
+         * so call fail() if it does *not* occur.
+         */
+        try {
+            testAssetDescriptor = mMockResolver.openTypedAssetFileDescriptor(
+                    NotePad.Notes.CONTENT_URI,
+                    MIME_TYPE_TEXT,
+                    null
+            );
+            fail();
+        } catch (FileNotFoundException e) {
+            // continue
+        }
+
+        /*
+         * Changes back to the note ID URI, but changes the MIME type filter to one that is not
+         * supported by the provider. This should also fail, since the provider will only open a
+         * pipe for MIME type "text/plain". A FileNotFound exception is expected, so calls
+         * fail() if it does *not* occur.
+         */
+
+        try {
+            testAssetDescriptor = mMockResolver.openTypedAssetFileDescriptor(
+                    testNoteIdUri,
+                    MIME_TYPES_NONE,
+                    null
+            );
+            fail();
+        } catch (FileNotFoundException e) {
+            // continue
+        }
+
+    }
+
+    /*
+     * Tests the provider's method for actually returning writing data into a pipe. The method is
+     * writeDataToPipe, but this method is not called directly. Instead, a caller invokes
+     * openTypedAssetFile(). That method uses ContentProvider.openPipeHelper(), which has as one of
+     * its arguments a ContentProvider.PipeDataWriter object that must actually put the data into
+     * the pipe. PipeDataWriter is an interface, not a class, so it must be implemented.
+     *
+     * The NotePadProvider class itself implements the "ContentProvider.PipeDataWriter, which means
+     * that it supplies the interface's only method, writeDataToPipe(). In effect, a call to
+     * openTypedAssetFile() calls writeDataToPipe().
+     *
+     *  The test of writeDataToPipe() is separate from other tests of openTypedAssetFile() for the
+     *  sake of clarity.
+     */
+    public void testWriteDataToPipe() throws FileNotFoundException {
+
+        // A string array to hold the incoming data
+        String[] inputData = {"","",""};
+
+        // A URI for a note ID.
+        Uri noteIdUri;
+
+        // A Cursor to contain the retrieved note.
+        Cursor noteIdCursor;
+
+        // An AssetFileDescriptor for the pipe.
+        AssetFileDescriptor noteIdAssetDescriptor;
+
+        // The ParcelFileDescriptor in the AssetFileDescriptor
+        ParcelFileDescriptor noteIdParcelDescriptor;
+
+        // Inserts test data into the provider.
+        insertData();
+
+        // Creates note ID URI for a note that should now be in the provider.
+        noteIdUri = ContentUris.withAppendedId(
+                NotePad.Notes.CONTENT_ID_URI_BASE,  // The base pattern for a note ID URI
+                1                                   // Sets the URI to point to record ID 1 in the
+                                                    // provider
+        );
+
+        // Gets a Cursor for the note.
+        noteIdCursor = mMockResolver.query(
+                noteIdUri,  // the URI for the note ID we want to retrieve
+                null,       // no projection, retrieve all the columns
+                null,       // no WHERE clause
+                null,       // no WHERE arguments
+                null        // default sort order
+        );
+
+        // Checks that the call worked.
+        // a) Checks that the cursor is not null
+        // b) Checks that it contains a single record
+        assertNotNull(noteIdCursor);
+        assertEquals(1,noteIdCursor.getCount());
+
+        // Opens the pipe that will contain the data.
+        noteIdAssetDescriptor = mMockResolver.openTypedAssetFileDescriptor(
+                noteIdUri,        // the URI of the note that will provide the data
+                MIME_TYPE_TEXT,   // the "text/plain" MIME type
+                null              // no other options
+        );
+
+        // Checks that the call worked.
+        // a) checks that the AssetFileDescriptor is not null
+        // b) gets its ParcelFileDescriptor
+        // c) checks that the ParcelFileDescriptor is not null
+        assertNotNull(noteIdAssetDescriptor);
+        noteIdParcelDescriptor = noteIdAssetDescriptor.getParcelFileDescriptor();
+        assertNotNull(noteIdParcelDescriptor);
+
+        // Gets a File Reader that can read the pipe.
+        FileReader fIn = new FileReader(noteIdParcelDescriptor.getFileDescriptor());
+
+        // Gets a buffered reader wrapper for the File Reader. This allows reading line by line.
+        BufferedReader bIn = new BufferedReader(fIn);
+
+        /*
+         * The pipe should contain three lines: The note's title, an empty line, and the note's
+         * contents. The following code reads and stores these three lines.
+         */
+        for (int index = 0; index < inputData.length; index++) {
+            try {
+                inputData[index] = bIn.readLine();
+            } catch (IOException e) {
+
+                e.printStackTrace();
+                fail();
+            }
+        }
+
+        // Asserts that the first record in the provider (written from TEST_NOTES[0]) has the same
+        // note title as the first line retrieved from the pipe.
+        assertEquals(TEST_NOTES[0].title, inputData[0]);
+
+        // Asserts that the first record in the provider (written from TEST_NOTES[0]) has the same
+        // note contents as the third line retrieved from the pipe.
+        assertEquals(TEST_NOTES[0].note, inputData[2]);
+    }
+
+    /*
+     * Tests the provider's public API for querying data in the table, using the URI for
+     * a dataset of records.
+     */
+    public void testQueriesOnNotesUri() {
+        // Defines a projection of column names to return for a query
+        final String[] TEST_PROJECTION = {
+            NotePad.Notes.COLUMN_NAME_TITLE,
+            NotePad.Notes.COLUMN_NAME_NOTE,
+            NotePad.Notes.COLUMN_NAME_MODIFICATION_DATE
+        };
+
+        // Defines a selection column for the query. When the selection columns are passed
+        // to the query, the selection arguments replace the placeholders.
+        final String TITLE_SELECTION = NotePad.Notes.COLUMN_NAME_TITLE + " = " + "?";
+
+        // Defines the selection columns for a query.
+        final String SELECTION_COLUMNS =
+            TITLE_SELECTION + " OR " + TITLE_SELECTION + " OR " + TITLE_SELECTION;
+
+         // Defines the arguments for the selection columns.
+        final String[] SELECTION_ARGS = { "Note0", "Note1", "Note5" };
+
+         // Defines a query sort order
+        final String SORT_ORDER = NotePad.Notes.COLUMN_NAME_TITLE + " ASC";
+
+        // Query subtest 1.
+        // If there are no records in the table, the returned cursor from a query should be empty.
+        Cursor cursor = mMockResolver.query(
+            NotePad.Notes.CONTENT_URI,  // the URI for the main data table
+            null,                       // no projection, get all columns
+            null,                       // no selection criteria, get all records
+            null,                       // no selection arguments
+            null                        // use default sort order
+        );
+
+         // Asserts that the returned cursor contains no records
+        assertEquals(0, cursor.getCount());
+
+         // Query subtest 2.
+         // If the table contains records, the returned cursor from a query should contain records.
+
+        // Inserts the test data into the provider's underlying data source
+        insertData();
+
+        // Gets all the columns for all the rows in the table
+        cursor = mMockResolver.query(
+            NotePad.Notes.CONTENT_URI,  // the URI for the main data table
+            null,                       // no projection, get all columns
+            null,                       // no selection criteria, get all records
+            null,                       // no selection arguments
+            null                        // use default sort order
+        );
+
+        // Asserts that the returned cursor contains the same number of rows as the size of the
+        // test data array.
+        assertEquals(TEST_NOTES.length, cursor.getCount());
+
+        // Query subtest 3.
+        // A query that uses a projection should return a cursor with the same number of columns
+        // as the projection, with the same names, in the same order.
+        Cursor projectionCursor = mMockResolver.query(
+              NotePad.Notes.CONTENT_URI,  // the URI for the main data table
+              TEST_PROJECTION,            // get the title, note, and mod date columns
+              null,                       // no selection columns, get all the records
+              null,                       // no selection criteria
+              null                        // use default the sort order
+        );
+
+        // Asserts that the number of columns in the cursor is the same as in the projection
+        assertEquals(TEST_PROJECTION.length, projectionCursor.getColumnCount());
+
+        // Asserts that the names of the columns in the cursor and in the projection are the same.
+        // This also verifies that the names are in the same order.
+        assertEquals(TEST_PROJECTION[0], projectionCursor.getColumnName(0));
+        assertEquals(TEST_PROJECTION[1], projectionCursor.getColumnName(1));
+        assertEquals(TEST_PROJECTION[2], projectionCursor.getColumnName(2));
+
+        // Query subtest 4
+        // A query that uses selection criteria should return only those rows that match the
+        // criteria. Use a projection so that it's easy to get the data in a particular column.
+        projectionCursor = mMockResolver.query(
+            NotePad.Notes.CONTENT_URI, // the URI for the main data table
+            TEST_PROJECTION,           // get the title, note, and mod date columns
+            SELECTION_COLUMNS,         // select on the title column
+            SELECTION_ARGS,            // select titles "Note0", "Note1", or "Note5"
+            SORT_ORDER                 // sort ascending on the title column
+        );
+
+        // Asserts that the cursor has the same number of rows as the number of selection arguments
+        assertEquals(SELECTION_ARGS.length, projectionCursor.getCount());
+
+        int index = 0;
+
+        while (projectionCursor.moveToNext()) {
+
+            // Asserts that the selection argument at the current index matches the value of
+            // the title column (column 0) in the current record of the cursor
+            assertEquals(SELECTION_ARGS[index], projectionCursor.getString(0));
+
+            index++;
+        }
+
+        // Asserts that the index pointer is now the same as the number of selection arguments, so
+        // that the number of arguments tested is exactly the same as the number of rows returned.
+        assertEquals(SELECTION_ARGS.length, index);
+
+    }
+
+    /*
+     * Tests queries against the provider, using the note id URI. This URI encodes a single
+     * record ID. The provider should only return 0 or 1 record.
+     */
+    public void testQueriesOnNoteIdUri() {
+      // Defines the selection column for a query. The "?" is replaced by entries in the
+      // selection argument array
+      final String SELECTION_COLUMNS = NotePad.Notes.COLUMN_NAME_TITLE + " = " + "?";
+
+      // Defines the argument for the selection column.
+      final String[] SELECTION_ARGS = { "Note1" };
+
+      // A sort order for the query.
+      final String SORT_ORDER = NotePad.Notes.COLUMN_NAME_TITLE + " ASC";
+
+      // Creates a projection includes the note id column, so that note id can be retrieved.
+      final String[] NOTE_ID_PROJECTION = {
+           NotePad.Notes._ID,                 // The Notes class extends BaseColumns,
+                                              // which includes _ID as the column name for the
+                                              // record's id in the data model
+           NotePad.Notes.COLUMN_NAME_TITLE};  // The note's title
+
+      // Query subtest 1.
+      // Tests that a query against an empty table returns null.
+
+      // Constructs a URI that matches the provider's notes id URI pattern, using an arbitrary
+      // value of 1 as the note ID.
+      Uri noteIdUri = ContentUris.withAppendedId(NotePad.Notes.CONTENT_ID_URI_BASE, 1);
+
+      // Queries the table with the notes ID URI. This should return an empty cursor.
+      Cursor cursor = mMockResolver.query(
+          noteIdUri, // URI pointing to a single record
+          null,      // no projection, get all the columns for each record
+          null,      // no selection criteria, get all the records in the table
+          null,      // no need for selection arguments
+          null       // default sort, by ascending title
+      );
+
+      // Asserts that the cursor is null.
+      assertEquals(0,cursor.getCount());
+
+      // Query subtest 2.
+      // Tests that a query against a table containing records returns a single record whose ID
+      // is the one requested in the URI provided.
+
+      // Inserts the test data into the provider's underlying data source.
+      insertData();
+
+      // Queries the table using the URI for the full table.
+      cursor = mMockResolver.query(
+          NotePad.Notes.CONTENT_URI, // the base URI for the table
+          NOTE_ID_PROJECTION,        // returns the ID and title columns of rows
+          SELECTION_COLUMNS,         // select based on the title column
+          SELECTION_ARGS,            // select title of "Note1"
+          SORT_ORDER                 // sort order returned is by title, ascending
+      );
+
+      // Asserts that the cursor contains only one row.
+      assertEquals(1, cursor.getCount());
+
+      // Moves to the cursor's first row, and asserts that this did not fail.
+      assertTrue(cursor.moveToFirst());
+
+      // Saves the record's note ID.
+      int inputNoteId = cursor.getInt(0);
+
+      // Builds a URI based on the provider's content ID URI base and the saved note ID.
+      noteIdUri = ContentUris.withAppendedId(NotePad.Notes.CONTENT_ID_URI_BASE, inputNoteId);
+
+      // Queries the table using the content ID URI, which returns a single record with the
+      // specified note ID, matching the selection criteria provided.
+      cursor = mMockResolver.query(noteIdUri, // the URI for a single note
+          NOTE_ID_PROJECTION,                 // same projection, get ID and title columns
+          SELECTION_COLUMNS,                  // same selection, based on title column
+          SELECTION_ARGS,                     // same selection arguments, title = "Note1"
+          SORT_ORDER                          // same sort order returned, by title, ascending
+      );
+
+      // Asserts that the cursor contains only one row.
+      assertEquals(1, cursor.getCount());
+
+      // Moves to the cursor's first row, and asserts that this did not fail.
+      assertTrue(cursor.moveToFirst());
+
+      // Asserts that the note ID passed to the provider is the same as the note ID returned.
+      assertEquals(inputNoteId, cursor.getInt(0));
+    }
+
+    /*
+     *  Tests inserts into the data model.
+     */
+    public void testInserts() {
+        // Creates a new note instance with ID of 30.
+        NoteInfo note = new NoteInfo(
+            "Note30", // the note's title
+            "Test inserting a note" // the note's content
+        );
+
+        // Sets the note's creation and modification times
+        note.setCreationDate(START_DATE + (10 * ONE_DAY_MILLIS));
+        note.setModificationDate(START_DATE + (2 * ONE_WEEK_MILLIS));
+
+        // Insert subtest 1.
+        // Inserts a row using the new note instance.
+        // No assertion will be done. The insert() method either works or throws an Exception
+        Uri rowUri = mMockResolver.insert(
+            NotePad.Notes.CONTENT_URI,  // the main table URI
+            note.getContentValues()     // the map of values to insert as a new record
+        );
+
+        // Parses the returned URI to get the note ID of the new note. The ID is used in subtest 2.
+        long noteId = ContentUris.parseId(rowUri);
+
+        // Does a full query on the table. Since insertData() hasn't yet been called, the
+        // table should only contain the record just inserted.
+        Cursor cursor = mMockResolver.query(
+            NotePad.Notes.CONTENT_URI, // the main table URI
+            null,                      // no projection, return all the columns
+            null,                      // no selection criteria, return all the rows in the model
+            null,                      // no selection arguments
+            null                       // default sort order
+        );
+
+        // Asserts that there should be only 1 record.
+        assertEquals(1, cursor.getCount());
+
+        // Moves to the first (and only) record in the cursor and asserts that this worked.
+        assertTrue(cursor.moveToFirst());
+
+        // Since no projection was used, get the column indexes of the returned columns
+        int titleIndex = cursor.getColumnIndex(NotePad.Notes.COLUMN_NAME_TITLE);
+        int noteIndex = cursor.getColumnIndex(NotePad.Notes.COLUMN_NAME_NOTE);
+        int crdateIndex = cursor.getColumnIndex(NotePad.Notes.COLUMN_NAME_CREATE_DATE);
+        int moddateIndex = cursor.getColumnIndex(NotePad.Notes.COLUMN_NAME_MODIFICATION_DATE);
+
+        // Tests each column in the returned cursor against the data that was inserted, comparing
+        // the field in the NoteInfo object to the data at the column index in the cursor.
+        assertEquals(note.title, cursor.getString(titleIndex));
+        assertEquals(note.note, cursor.getString(noteIndex));
+        assertEquals(note.createDate, cursor.getLong(crdateIndex));
+        assertEquals(note.modDate, cursor.getLong(moddateIndex));
+
+        // Insert subtest 2.
+        // Tests that we can't insert a record whose id value already exists.
+
+        // Defines a ContentValues object so that the test can add a note ID to it.
+        ContentValues values = note.getContentValues();
+
+        // Adds the note ID retrieved in subtest 1 to the ContentValues object.
+        values.put(NotePad.Notes._ID, (int) noteId);
+
+        // Tries to insert this record into the table. This should fail and drop into the
+        // catch block. If it succeeds, issue a failure message.
+        try {
+            rowUri = mMockResolver.insert(NotePad.Notes.CONTENT_URI, values);
+            fail("Expected insert failure for existing record but insert succeeded.");
+        } catch (Exception e) {
+          // succeeded, so do nothing.
+        }
+    }
+
+    /*
+     * Tests deletions from the data model.
+     */
+    public void testDeletes() {
+        // Subtest 1.
+        // Tries to delete a record from a data model that is empty.
+
+        // Sets the selection column to "title"
+        final String SELECTION_COLUMNS = NotePad.Notes.COLUMN_NAME_TITLE + " = " + "?";
+
+        // Sets the selection argument "Note0"
+        final String[] SELECTION_ARGS = { "Note0" };
+
+        // Tries to delete rows matching the selection criteria from the data model.
+        int rowsDeleted = mMockResolver.delete(
+            NotePad.Notes.CONTENT_URI, // the base URI of the table
+            SELECTION_COLUMNS,         // select based on the title column
+            SELECTION_ARGS             // select title = "Note0"
+        );
+
+        // Assert that the deletion did not work. The number of deleted rows should be zero.
+        assertEquals(0, rowsDeleted);
+
+        // Subtest 2.
+        // Tries to delete an existing record. Repeats the previous subtest, but inserts data first.
+
+        // Inserts data into the model.
+        insertData();
+
+        // Uses the same parameters to try to delete the row with title "Note0"
+        rowsDeleted = mMockResolver.delete(
+            NotePad.Notes.CONTENT_URI, // the base URI of the table
+            SELECTION_COLUMNS,         // same selection column, "title"
+            SELECTION_ARGS             // same selection arguments, title = "Note0"
+        );
+
+        // The number of deleted rows should be 1.
+        assertEquals(1, rowsDeleted);
+
+        // Tests that the record no longer exists. Tries to get it from the table, and
+        // asserts that nothing was returned.
+
+        // Queries the table with the same selection column and argument used to delete the row.
+        Cursor cursor = mMockResolver.query(
+            NotePad.Notes.CONTENT_URI, // the base URI of the table
+            null,                      // no projection, return all columns
+            SELECTION_COLUMNS,         // select based on the title column
+            SELECTION_ARGS,            // select title = "Note0"
+            null                       // use the default sort order
+        );
+
+        // Asserts that the cursor is empty since the record had already been deleted.
+        assertEquals(0, cursor.getCount());
+    }
+
+    /*
+     * Tests updates to the data model.
+     */
+    public void testUpdates() {
+        // Selection column for identifying a record in the data model.
+        final String SELECTION_COLUMNS = NotePad.Notes.COLUMN_NAME_TITLE + " = " + "?";
+
+        // Selection argument for the selection column.
+        final String[] selectionArgs = { "Note1" };
+
+        // Defines a map of column names and values
+        ContentValues values = new ContentValues();
+
+        // Subtest 1.
+        // Tries to update a record in an empty table.
+
+        // Sets up the update by putting the "note" column and a value into the values map.
+        values.put(NotePad.Notes.COLUMN_NAME_NOTE, "Testing an update with this string");
+
+        // Tries to update the table
+        int rowsUpdated = mMockResolver.update(
+            NotePad.Notes.CONTENT_URI,  // the URI of the data table
+            values,                     // a map of the updates to do (column title and value)
+            SELECTION_COLUMNS,           // select based on the title column
+            selectionArgs               // select "title = Note1"
+        );
+
+        // Asserts that no rows were updated.
+        assertEquals(0, rowsUpdated);
+
+        // Subtest 2.
+        // Builds the table, and then tries the update again using the same arguments.
+
+        // Inserts data into the model.
+        insertData();
+
+        //  Does the update again, using the same arguments as in subtest 1.
+        rowsUpdated = mMockResolver.update(
+            NotePad.Notes.CONTENT_URI,   // The URI of the data table
+            values,                      // the same map of updates
+            SELECTION_COLUMNS,            // same selection, based on the title column
+            selectionArgs                // same selection argument, to select "title = Note1"
+        );
+
+        // Asserts that only one row was updated. The selection criteria evaluated to
+        // "title = Note1", and the test data should only contain one row that matches that.
+        assertEquals(1, rowsUpdated);
+
+    }
+
+    // A utility for converting note data to a ContentValues map.
+    private static class NoteInfo {
+        String title;
+        String note;
+        long createDate;
+        long modDate;
+
+        /*
+         * Constructor for a NoteInfo instance. This class helps create a note and
+         * return its values in a ContentValues map expected by data model methods.
+         * The note's id is created automatically when it is inserted into the data model.
+         */
+        public NoteInfo(String t, String n) {
+            title = t;
+            note = n;
+            createDate = 0;
+            modDate = 0;
+        }
+
+        // Sets the creation date for a test note
+        public void setCreationDate(long c) {
+            createDate = c;
+        }
+
+        // Sets the modification date for a test note
+        public void setModificationDate(long m) {
+            modDate = m;
+        }
+
+        /*
+         * Returns a ContentValues instance (a map) for this NoteInfo instance. This is useful for
+         * inserting a NoteInfo into a database.
+         */
+        public ContentValues getContentValues() {
+            // Gets a new ContentValues object
+            ContentValues v = new ContentValues();
+
+            // Adds map entries for the user-controlled fields in the map
+            v.put(NotePad.Notes.COLUMN_NAME_TITLE, title);
+            v.put(NotePad.Notes.COLUMN_NAME_NOTE, note);
+            v.put(NotePad.Notes.COLUMN_NAME_CREATE_DATE, createDate);
+            v.put(NotePad.Notes.COLUMN_NAME_MODIFICATION_DATE, modDate);
+            return v;
+
+        }
+    }
+}
Index: .idea/copyright/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/copyright/profiles_settings.xml	(date 1588734750000)
+++ .idea/copyright/profiles_settings.xml	(date 1588734750000)
@@ -0,0 +1,3 @@
+<component name="CopyrightManager">
+  <settings default="" />
+</component>
\ No newline at end of file
Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/jarRepositories.xml	(date 1606208147964)
+++ .idea/jarRepositories.xml	(date 1606208147964)
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="BintrayJCenter" />
+      <option name="name" value="BintrayJCenter" />
+      <option name="url" value="https://jcenter.bintray.com/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="Google" />
+      <option name="name" value="Google" />
+      <option name="url" value="https://dl.google.com/dl/android/maven2/" />
+    </remote-repository>
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/res/drawable/item_selector_selected.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/item_selector_selected.xml	(date 1607956738487)
+++ app/src/main/res/drawable/item_selector_selected.xml	(date 1607956738487)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android">
+    <solid android:color="@color/list_item_pressed"></solid>
+    <corners android:radius="15dp"></corners>
+</shape>
+
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(date 1608021618031)
+++ .idea/vcs.xml	(date 1608021618031)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/runConfigurations.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/runConfigurations.xml	(date 1588734750000)
+++ .idea/runConfigurations.xml	(date 1588734750000)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RunConfigurationProducerService">
+    <option name="ignoredProducers">
+      <set>
+        <option value="org.jetbrains.plugins.gradle.execution.test.runner.AllInPackageGradleConfigurationProducer" />
+        <option value="org.jetbrains.plugins.gradle.execution.test.runner.TestClassGradleConfigurationProducer" />
+        <option value="org.jetbrains.plugins.gradle.execution.test.runner.TestMethodGradleConfigurationProducer" />
+      </set>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(date 1606205543332)
+++ .idea/gradle.xml	(date 1606205543332)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
+  <component name="GradleSettings">
+    <option name="linkedExternalProjectsSettings">
+      <GradleProjectSettings>
+        <option name="testRunner" value="PLATFORM" />
+        <option name="distributionType" value="DEFAULT_WRAPPED" />
+        <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="modules">
+          <set>
+            <option value="$PROJECT_DIR$" />
+            <option value="$PROJECT_DIR$/app" />
+          </set>
+        </option>
+        <option name="resolveModulePerSourceSet" value="false" />
+      </GradleProjectSettings>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/compiler.xml	(date 1588734750000)
+++ .idea/compiler.xml	(date 1588734750000)
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <resourceExtensions />
+    <wildcardResourcePatterns>
+      <entry name="!?*.java" />
+      <entry name="!?*.form" />
+      <entry name="!?*.class" />
+      <entry name="!?*.groovy" />
+      <entry name="!?*.scala" />
+      <entry name="!?*.flex" />
+      <entry name="!?*.kt" />
+      <entry name="!?*.clj" />
+      <entry name="!?*.aj" />
+    </wildcardResourcePatterns>
+    <annotationProcessing>
+      <profile default="true" name="Default" enabled="false">
+        <processorPath useClasspath="true" />
+      </profile>
+    </annotationProcessing>
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/res/values/color.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/color.xml	(date 1607956118330)
+++ app/src/main/res/values/color.xml	(date 1607956118330)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="color_white">#FFFFFF</color>
+    <color name="noteBackground">#f2f2f2</color>
+
+    <color name="list_item_pressed">#DACDCD</color>
+    <color name="list_item_default">#ffffff</color>
+
+
+    <color name="title_textColor">#191919</color>
+</resources>
\ No newline at end of file
Index: .idea/.name
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/.name	(date 1588734750000)
+++ .idea/.name	(date 1588734750000)
@@ -0,0 +1,1 @@
+NotePad
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(date 1607957793232)
+++ .idea/misc.xml	(date 1607957793232)
@@ -0,0 +1,73 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="MavenImportPreferences">
+    <option name="generalSettings">
+      <MavenGeneralSettings>
+        <option name="localRepository" value="D:\Maven\repository" />
+        <option name="mavenHome" value="Bundled (Maven 3)" />
+        <option name="userSettingsFile" value="C:\Users\ll\.m2\settings.xml" />
+      </MavenGeneralSettings>
+    </option>
+  </component>
+  <component name="NullableNotNullManager">
+    <option name="myDefaultNullable" value="android.support.annotation.Nullable" />
+    <option name="myDefaultNotNull" value="android.support.annotation.NonNull" />
+    <option name="myNullables">
+      <value>
+        <list size="12">
+          <item index="0" class="java.lang.String" itemvalue="org.jetbrains.annotations.Nullable" />
+          <item index="1" class="java.lang.String" itemvalue="javax.annotation.Nullable" />
+          <item index="2" class="java.lang.String" itemvalue="edu.umd.cs.findbugs.annotations.Nullable" />
+          <item index="3" class="java.lang.String" itemvalue="android.support.annotation.Nullable" />
+          <item index="4" class="java.lang.String" itemvalue="javax.annotation.CheckForNull" />
+          <item index="5" class="java.lang.String" itemvalue="androidx.annotation.Nullable" />
+          <item index="6" class="java.lang.String" itemvalue="android.annotation.Nullable" />
+          <item index="7" class="java.lang.String" itemvalue="androidx.annotation.RecentlyNullable" />
+          <item index="8" class="java.lang.String" itemvalue="org.checkerframework.checker.nullness.qual.Nullable" />
+          <item index="9" class="java.lang.String" itemvalue="org.checkerframework.checker.nullness.compatqual.NullableDecl" />
+          <item index="10" class="java.lang.String" itemvalue="org.checkerframework.checker.nullness.compatqual.NullableType" />
+          <item index="11" class="java.lang.String" itemvalue="com.android.annotations.Nullable" />
+        </list>
+      </value>
+    </option>
+    <option name="myNotNulls">
+      <value>
+        <list size="11">
+          <item index="0" class="java.lang.String" itemvalue="org.jetbrains.annotations.NotNull" />
+          <item index="1" class="java.lang.String" itemvalue="javax.annotation.Nonnull" />
+          <item index="2" class="java.lang.String" itemvalue="edu.umd.cs.findbugs.annotations.NonNull" />
+          <item index="3" class="java.lang.String" itemvalue="android.support.annotation.NonNull" />
+          <item index="4" class="java.lang.String" itemvalue="androidx.annotation.NonNull" />
+          <item index="5" class="java.lang.String" itemvalue="android.annotation.NonNull" />
+          <item index="6" class="java.lang.String" itemvalue="androidx.annotation.RecentlyNonNull" />
+          <item index="7" class="java.lang.String" itemvalue="org.checkerframework.checker.nullness.qual.NonNull" />
+          <item index="8" class="java.lang.String" itemvalue="org.checkerframework.checker.nullness.compatqual.NonNullDecl" />
+          <item index="9" class="java.lang.String" itemvalue="org.checkerframework.checker.nullness.compatqual.NonNullType" />
+          <item index="10" class="java.lang.String" itemvalue="com.android.annotations.NonNull" />
+        </list>
+      </value>
+    </option>
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_7" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/build/classes" />
+  </component>
+  <component name="ProjectType">
+    <option name="id" value="Android" />
+  </component>
+  <component name="masterDetails">
+    <states>
+      <state key="ProjectJDKs.UI">
+        <settings>
+          <last-edited>1.7</last-edited>
+          <splitter-proportions>
+            <option name="proportions">
+              <list>
+                <option value="0.2" />
+              </list>
+            </option>
+          </splitter-proportions>
+        </settings>
+      </state>
+    </states>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/modules.xml	(date 1606208147942)
+++ .idea/modules.xml	(date 1606208147942)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/NotePad.iml" filepath="$PROJECT_DIR$/NotePad.iml" />
+      <module fileurl="file://$PROJECT_DIR$/.idea/modules/NotePad-master.iml" filepath="$PROJECT_DIR$/.idea/modules/NotePad-master.iml" group="NotePad-master" />
+      <module fileurl="file://$PROJECT_DIR$/.idea/modules/app/NotePad-master-app.iml" filepath="$PROJECT_DIR$/.idea/modules/app/NotePad-master-app.iml" group="NotePad-master/app" />
+      <module fileurl="file://$PROJECT_DIR$/app/app.iml" filepath="$PROJECT_DIR$/app/app.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/encodings.xml	(date 1588734750000)
+++ .idea/encodings.xml	(date 1588734750000)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="PROJECT" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/codeStyles/Project.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/codeStyles/Project.xml	(date 1606205543353)
+++ .idea/codeStyles/Project.xml	(date 1606205543353)
@@ -0,0 +1,116 @@
+<component name="ProjectCodeStyleConfiguration">
+  <code_scheme name="Project" version="173">
+    <codeStyleSettings language="XML">
+      <indentOptions>
+        <option name="CONTINUATION_INDENT_SIZE" value="4" />
+      </indentOptions>
+      <arrangement>
+        <rules>
+          <section>
+            <rule>
+              <match>
+                <AND>
+                  <NAME>xmlns:android</NAME>
+                  <XML_ATTRIBUTE />
+                  <XML_NAMESPACE>^$</XML_NAMESPACE>
+                </AND>
+              </match>
+            </rule>
+          </section>
+          <section>
+            <rule>
+              <match>
+                <AND>
+                  <NAME>xmlns:.*</NAME>
+                  <XML_ATTRIBUTE />
+                  <XML_NAMESPACE>^$</XML_NAMESPACE>
+                </AND>
+              </match>
+              <order>BY_NAME</order>
+            </rule>
+          </section>
+          <section>
+            <rule>
+              <match>
+                <AND>
+                  <NAME>.*:id</NAME>
+                  <XML_ATTRIBUTE />
+                  <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
+                </AND>
+              </match>
+            </rule>
+          </section>
+          <section>
+            <rule>
+              <match>
+                <AND>
+                  <NAME>.*:name</NAME>
+                  <XML_ATTRIBUTE />
+                  <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
+                </AND>
+              </match>
+            </rule>
+          </section>
+          <section>
+            <rule>
+              <match>
+                <AND>
+                  <NAME>name</NAME>
+                  <XML_ATTRIBUTE />
+                  <XML_NAMESPACE>^$</XML_NAMESPACE>
+                </AND>
+              </match>
+            </rule>
+          </section>
+          <section>
+            <rule>
+              <match>
+                <AND>
+                  <NAME>style</NAME>
+                  <XML_ATTRIBUTE />
+                  <XML_NAMESPACE>^$</XML_NAMESPACE>
+                </AND>
+              </match>
+            </rule>
+          </section>
+          <section>
+            <rule>
+              <match>
+                <AND>
+                  <NAME>.*</NAME>
+                  <XML_ATTRIBUTE />
+                  <XML_NAMESPACE>^$</XML_NAMESPACE>
+                </AND>
+              </match>
+              <order>BY_NAME</order>
+            </rule>
+          </section>
+          <section>
+            <rule>
+              <match>
+                <AND>
+                  <NAME>.*</NAME>
+                  <XML_ATTRIBUTE />
+                  <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
+                </AND>
+              </match>
+              <order>ANDROID_ATTRIBUTE_ORDER</order>
+            </rule>
+          </section>
+          <section>
+            <rule>
+              <match>
+                <AND>
+                  <NAME>.*</NAME>
+                  <XML_ATTRIBUTE />
+                  <XML_NAMESPACE>.*</XML_NAMESPACE>
+                </AND>
+              </match>
+              <order>BY_NAME</order>
+            </rule>
+          </section>
+        </rules>
+      </arrangement>
+    </codeStyleSettings>
+  </code_scheme>
+</component>
\ No newline at end of file
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build.gradle	(date 1606206063029)
+++ build.gradle	(date 1606206063029)
@@ -0,0 +1,21 @@
+// Top-level build file where you can add configuration options common to all sub-projects/modules.
+buildscript {
+    repositories {
+        google()
+        jcenter()
+        
+    }
+    dependencies {
+        classpath "com.android.tools.build:gradle:4.0.1"
+
+        // NOTE: Do not place your application dependencies here; they belong
+        // in the individual module build.gradle files
+    }
+}
+
+allprojects {
+    repositories {
+        google()
+        jcenter()
+    }
+}
Index: settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- settings.gradle	(date 1588734750000)
+++ settings.gradle	(date 1588734750000)
@@ -0,0 +1,1 @@
+include ':app'
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .gitignore	(date 1608021509673)
+++ .gitignore	(date 1608021509673)
@@ -0,0 +1,31 @@
+*.iml
+.gradle
+/local.properties
+/.idea/workspace.xml
+/.idea/libraries
+.DS_Store
+/build
+/captures
+
+# Built application files  
+*.apk  
+*.ap_  
+  
+# Files for the Dalvik VM  
+*.dex  
+  
+# Java class files  
+*.class  
+
+# Generated files
+bin/
+gen/
+
+# Proguard folder generated by Eclipse
+proguard/
+
+# Log Files
+*.log
+
+# Project exclude paths
+/app/build/
\ No newline at end of file
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- README.md	(date 1608021606037)
+++ README.md	(date 1608021606037)
@@ -0,0 +1,2 @@
+# NotePad
+## dididi
diff --git gradle/wrapper/gradle-wrapper.jar gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 0000000000000000000000000000000000000000..13372aef5e24af05341d49695ee84e5f9b594659
GIT binary patch
literal 53636
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
z%0A`iQ&0l&e^T5Lbk?;q{HNsfa^;_MRRtv8M(vg}r)u<EuT4lj<Q6m-*1;ke6aX1~
z+APag@5VC?%*NLJ^Z97;OXwdvh_WJ)WPCn|h8dbk8q;Z_+u7seqp9|V&im&tKW?5O
zeO${ZV|wA?xoW<f3VqH_$Dsfe5JL+0)j^;$(-^UmF&63Rh{h7D+o#K(&q^ohGesn8
zO;NFcRjwH28fgX&Xt@}9ULhJK67Tajww-DbI$&04Q<1ri+0nhe>**=BacT0X=+3cd
zaWrEi2jwm|nnRO!nJXN8KU8kp+8s##O!Q^Y37aWe=P~KTqHUk#J?+zKQCr6uN8w^!
z^FeBWCc+uhN_OardCSm-itP6Q?+{(ARGPC()wWOeMG90;-F7&o%|&nu?{I3ivdAKP
z9i6leLWo?;mY$vuySe$+3ssyn^Ng(2zq>H;9;z4TkOtO8)v8SbLYTR%^p*PZqR8n=
z)uyV$Sc3xJ??oDSP&d$RJ?yElN-)FS!AjS2!!c9t@bD1gq^zGwAuQMTDUQbwzcLsX
zZxeuGQS_*Cb8qOZHSOWUJJDGzU_-dJzidV_xCE}yUong*9Tgla6s2Bij9s^#cH?QU
zhN5bTHs>?Ej3n|NEm_=s$;>k6!7GZG!u?R>Yz)?8*XQe?@s3wC@4ZQMkV(zKAT2V9
z6q}{Yg+KNwEs2;H;gq}}{g<Tgbcm5-M14j8p=!9jFF~iGInQLQB)zWCpMkGn9#GJk
z3p)iKCbz-`E0n9lDd)FBx0ov4XKm5+gJki-)hUSXFz1P|3M6?7pW-t?zIQI5WS({X
z!TSMH;uNCdw)%6iBt%09hvxA#y^}+@uNBzB3hPdjz&z0&ndirGT4b&fyb9{?wDH1O
zNYFLl+wGzlNB7o$Z1R*~5^&hSKtRU71tb1#lYcWmjZ~18?h!!poSE;Rtt_FOAYp+K
ztCXddP(TBLfnIMsYO#=HuUSiYVMBZY@=j=y%>|1W!c59^t-Wa1-9NZH!R_K5$9KTb
zK*=Cegsp(j-GD8!`1&J(daDzwVu@o<5ZWDI-c=8z5(b$odL+ObC$+fQpV<#rGB;(2
zm2!0s8c|BkpiYSd3&Ix9<rXE&UAHihfh9eERsO?KCxG`LUV$wgzzSWk++2HtpU>7&
zk=Y-NCc2`Et{3{j<gm+~@*2Xn(~PGq^FzWO*Ooj}{UauM^OPI3)<%U|z{uHndS$@5
zH*EKq)3!gxLj-N@l2W>W$tTA&dLdN$^s}Wh!%H?iT-K_ON~>v711bnMYQ5&WPy>DL
z-y#2aeTAnm_K!h<fIMLTqKuu8p^>$np_r+iy@R5o-hco9_e<WVVyTF#isofiV`E!u
zA_1S+uqfd#paUgXDu4uw9D@>SnZUN#D62LzXRxqjQR1D;pZnT9Ugw`we5+~vSn&Fp
zKX1m~Ss#j`>Z@(x$Mccq3EqR|i7fZqmzxV~2B3V~kNxVSnR!M!Vp#Tg*w`o-hIE@6
zK+;X)m!T<i_GM6u@YqZ$obwP><F<<Z5PXS%5ZS1V2&4v%?|6;ak7pM*ZVo}ZbjBKq
zN_`)kOEpTg<`mUyRTLxFGOSD*l}jtsv4t3pgRB?;W%6!4AH_NL*Vwd-%+dvi(^_$Q
zuyq&BW~I^`#p#uYP=-?t>s!h-T2j~}<8nrjbf(VJlNt&&9a|@<SUs7jaD#Hymr67$
z&B4;I$gt0jL*#I%2nAY0W?V6X1ZSugOAHSPms(71JjNM!qt?{wOyVmuhgLyvAX$}_
zBc)0{X|^Z~IcOBN6+7QkAb8D{Kpk=Ym}+Fk=Ly|KSOrhpN0e1;hp^%#FpH<zh_KaS
zYfga^_XUPS+>oMit(D_G+IMFnO{+68!p>_y)sKNS>Y-6g3&F!X?~;LSM$hO8@zZS^
zu?;46CBg37Z-r^N1RqF-30u?+agqG8NzkE}au?yS;9`;z9r<p^<@^gdI3^>7n&$`-
zKUY_cvgs^KkB;Yu`Lyg8p&7&cRE!~-EfTA7QHuT()ET(1{y#>O2}}&rceuf6q)7Bq
zw@MCT*`hfnZSKIgl8<{5*-IhYk?e%u@vG3EG3I{8Fp~HBdZgo8bW$C<<A=rOP9xN=
zL!(ZgT<^xq#V(wD@&WPAbvSaa>c;Fi=}`i0LKuR^0Da7;X;E%wEJ4+MMHUinAKd>^
z2kX=(Cd*g&_+?QxvGKjzvbjTL8pKCqA@qz7wS{qXSK2P?+&aZ7^$5;OwA;^D5Qd98
z3!Be~_np168NIY5*EujV+!5gZd2KU;h}mCmukYNVjo3}ki*!Q!yaO39<WIl8GLLz>
zWG~O?MQRHZY6|&i4?r5=7P5BhCwTN=E7X(Y_J}tvUO%!!Op3QRAQofESMgq3_IdeU
zU_YWxeD%Bs1%;gsxu%@1c$k%kIum}^Z;BIwtmE1e{Z;R<?wWfX?Rlu18SIYn+Kw<c
zZ!s1xR)=`Qbve(SAmh*|^cX&(MmeIIm28oV$-;j<oHO{vFj+0UBM4ds#S)N~7mEmd
zN)!Z!@0qYGsfY6ciA=r4wTY)(V%A=q-YG|=)20U_lM#S94buaVK4vy{7@Crfc(<c}
z;I3usq16{WTN&eIe8lOIMW=8)Kz^yEBaorfM}3Tp=i~Cun3$jkwn?;!@g`f6&qMZ^
zJ?_UF!P<Br?$qBhtAG6LqdEV%4^ecrcQCa4Yl+n(Qau7_K@*Fmmh}zuW^<yetU{<F
zy@8l97?>Xz-XD3T5zNGrp;F8UtxKu;!4h@_qfnY66$|#NXE0w)ypClww|Td90Cxdf
zBoiS<l31YSst1gLSfJ;K5_u2vP)tA@EI-BwG>i;L<SZK#tjnw+hq-gvC49KB59bo5
zQDc$oEz79#=~BpsU8w`d=QhzmV20EsnrcT~6(`1q&^~XO#T5^CYGzj?2}1>8#WmD}
zvGyEl63>~Me~NYxlMQxj;EeHeZK!GRQgf%GwzrY_#BTVm3QSss4*p(A&1EPr?4~op
zNCaFd2S^koUpxn|_x*q>n(q#<lx2m9S50|8Aq%JAnVCy@{Ztiv`HX#!$?Yh-@oZ|I
z6%xmf0oLLb?VNXFzG$;?o%U6boHv^aBOsyUdD}HOsWhmG_D>7~S<1%HQZ)Pe)d+^@
zwD$hPw15tnIk0mwo5GIkIv=*q+*Ae!dhjv2JnmwXpRe!oG+;{j%uh95!Txwl>CsL6
zAb;M@RxltSroS>Q{PW&N#SQD}_h>J2)M&8wU8_ngsO)%*Y{wqVSh8ekDKVDNMu_gM
z0zEAWn)WO7kNgkY;S_xLkoP~oaak@I_=A~FXA$0ITzDL0tZaCDy@1#N4T#~aurV!;
z=b7zbJJHS3vp}V)W?knk1SqxJ3Ndnjog^=F;yohJiFm4bq<Z9Yms<No^aC}Q$5KAS
z$YDP)V72;vZmC;r$YSa%Q9&tJ2b6F!qUM@FWJWBC@P;Eq$AN?2rP^R_Ma-^p(ez3{
zx0=UMt3~nQq2exhT$Rp6R=D)my--w!PCgH(8M_>`Izt<bBsA+Zo$)plt#5`<ZIv_?
z#UuQBk$u=Gb!$^5w#9x7?5-|R<zPqV!o;*a%&yWPH)q`>na}%Dh9EAJ6HDCeY}Arh
zRM{%`uYovC7rgEFk*O(3R#b?v>VC@JsBE{Ivas&1r=Lx7MHe*-dC$)`e4-u?&WT9c
z)V#h2l=qFTQ6*XUyJLl$*c39@7$W<rZ*|gwKC3ZaL%BdZFWRYn7mHbc2HwG?g|K)r
zs*4{Utj>}LQL6x<U={>G&{WF^EN2*+92!yI;O{SJGNuDY#Zcn9dY5s|eX(rt5%o5M
zsf0g9i7%X{RgYa*8gVO*Qu)%E430@|ODFZ`m#6N2N6Wru&1T8UK`G*m+-bB)HpHgp
zE7t9+<NO@-L`PUFLi~jJ$7Utg0CmUvbG9)I{ipHAf3d9eFD4r&A7<Voy~t@o<pWEB
z_j2nQ=Fr!HBUialE5G|dr6xM{F}D|o3OXL*65Ru61Ju~zeX8w`gNW#DVUBZ27&Phh
zZpNMLT6d>A4`b)rR?f~Bk0%78AW`J85SD2a^eMj(i5fwMARFnfDxVcCW*VWc6d!Jo
zeo+@&`GAlo5CSL(#@Tf1Ss|j~$;|0UEi&W5Qdjc0vC`Q5j%s4_Qfg&I41>=(Shh6;
zs;qNu1B`Pg7B7{7<T~`#;dk@^m$=80?#XWOD@|P5uuCPKq4?hH=~_E4Nj9Yp1{mH|
z?VyHUb437!^5;)R4Ju(VaMKZm)M88wm@qKvksOa$90<YN*G7o+(UP*RWN@-ANdUth
z8SAu?3TO$Yy5%-cbZXgdx21HA_>JM%wz54E?3wrVT5Vd>2dA#sY!91Bk$Cc2*aV)O
zYc-TbQbN+0hI1Y5mZ+HDVu0aJjK6PX_JphVZMk9YNk=gF!})5A146JpM+Rx)X)05q
zn9_l>2%x<(;x~m$eZ)~H0OX%Ey5R_z9XJjBbw{USjh9;rt<47#1dPcO1EiZq@zXyq
zJGOml0Pzqf7xj*0HC%vmR6I&*Wt~W7>G@W?T#}S>ii^5ZlZzKw9H;kf*HdWkTuW3r
zyo)W5E525};5}4?Sg};FnMnj+D|4d^D`9Fp`@<{;Ne;p|HHEPJQH(@o8MV6ot3|Oy
z7f56YX>L2eRa=H2chY#OM!IuDp@J&y@`WN?)-k%ySR2R9i|TPVrJyM0^Pc7*Z<hxj
z-(-k=Pu~IV*a_RR?995X5=;<Z4?0|+^VW-mJLa;f<vv$K2-hu`PLd$x5SN7bEk|^?
zPv4XQ33d;9%b3`+4}?nyg<tmOBZ&Mx?XlLq@8iQu_O}Z`HH6qg;z6gWrdmkb)RnWZ
zt#~l;62}{=Y-e~)+Xp_UoEl58b+v|Ii?kz|Ii6F#+|XL$?9E@BaeJGo4yizzpc|t<
zUt?&?D4P7p|I{~%pkHwiyd(tOWCQdrCweob54`*fC#KNiuvupyzz0@@k_vR}di$7c
zNI7qThr}(UdqIFw4-44atPhE@J^4`ko45uXDgmZZXd%z`8wnuOb<h9WJtOk-m++Sh
zz|SZ0Z#V!jz5izifW1HH{sV)cf&N|znm4NV&_MrlAOW2T{`M*>sw7A+DJRD8w%9^q
z%7@=%i<E!<q5=In@_niQv6!r&oTQkjqS8BAv42FsctZ^K55&)cY5(0r{ksyde<;!M
z$3E@f6-50*!J~g+@AU@2#LvL!^UsgY{kLDk{~UF`zZoX{8&|0RQCfcs*tZ@ykM^@l
zHekQs{$GH<RrKEhzMa+meCOgS=;&Z#Xyst4|7$bVTgHP^HT#mE3@bptn|A(UbOQTx
z3(r3~TfM~tD|TDc`dL?npQY*lfcFXfPw~Y6>s0yY=ptclX((fDZSH9E=g@fD+ADoO
zK^|d#Ul9HU4GHz9(4sE-7LN9&PCvgMTNn!J>l@nJ%j#O`8XNwLYcUG1Blequ_5;M*
zy5l4KDS_(muRo{FMyAG&cDlcU+;5>3Jn>EUeqIvnpMPTf1M~yZpF+RApAtVuT8n>G
z@d8)I7M0&xGWhR3#xHa_j6X$}u{QpfS7F@lBn%xA2*?WI_ia(Xz&f%1chkE+$K+UV
zSi}AKh@JlI1&IEDiAD79jAH*BZLLctwD;%5OoV=WpKO``6ivw5+TpjQR2x}cQ>&ko
z;$L5J-a<>vH<Hc#JSD~Y-7?`9v=7I>YXYJ!hWd{G@*xYr$uF(>c`Ec1mF5qqslxx}
zq4;m?-zxp*xNjYIf8oZ<{T2V+w|H+I4u9d<EC1(yhi_Tly6633@l^c_UV3lg-kRq8
zf}8vJmn?Mt5%AAUZ+-z9efrlHIB!vYEAfxEF~1+b4K8N7|GZ%Krtn)6nSW?7|6KTg
zx0HDc|JE4f7d)B4U$+T)i~81r;}<HD;omdlc+2$G>fjd>ipk$JK6p#@R%!kh)r;AG
zpgaE-{;g#CFZcwDzbT;pmg=qc>MyDWhyPfK^)1O;`O04;i_U*r%<?VSTeZJmWEk#$
zRr~KP=3A|)Uzn#p|GDziTb8$?M!#5&{Qj!M(Ob;7f(pMdzlQxCd4+%KJl<^b|HYFS
z@&DJB|F@iPw`%|56psF@8@JzLzRjuqg?XO)A7$9SC3u^__={jW|36A+d`s{)ee4%O
zU(w%6CVNZtHr?YFkyqLOE&1au^4lf!U&sNKe{(_oE!Eql%U@K^HUEc&%(t*_SL}Yl
zF4X?L^}Bz%3vc53znE~F{zjDlEzR3l^FKTn&HqW{`7Qq2pyMxm(YC)8f_zK#HjeU(
dXr=RijjFtt28a0V!+@VZNI!dNovz=`{vXo^NK60#

diff --git .idea/caches/build_file_checksums.ser .idea/caches/build_file_checksums.ser
new file mode 100644
index 0000000000000000000000000000000000000000..66ad5bb4c27536af8833e68719079853d59d23ce
GIT binary patch
literal 537
zc${1FmVvdnh`~NNKUXg?FQq6yGexf?KR>5fFEb@IQ7^qHF(oHeub?PDD>b=9F91S2
zm1gFoxMk*~I%lLNXBU^|7Q2L-Ts|(GuF1r}<i#MFTj`TnT;dMa8(f)}9Fm!vT3nKt
zTj0aMpIeEdv4nx&Co8cmQNOe#Ge_SyvB0{bfPsOrEVaG+B+y-gAUQpdoSsKwaRyMH
zmHpPi!(s^+nHiYe7`Srs6I0w0lS}f8JQ+AkGKx}*GxBp%Dhli!7(jrhoC8P-05Mw$
zgFs?IK}-_J=}>Q#7BMhIJFWRF{)3Gp<N*@{1ITIy0hiYj!oT+yBt5<Ayf^ucqXW>1
z#i=DFnR)5OFpY%_bqs7EwafoW9iEuE^{GZwTyUDcs&okh4~h+Ng~t2NM_pl97Pn5J
zk+a0za23!wIr+(nIiR2|NG&SKOf5zz{=2Ey@`&--Lwn=C`My6N6IH^X;cOKXTAW%`
z9FtR3kz5=DH9rOsKNyC{v2$O^ii&!nJHv@>H^ZBiB@BXiR9}(px!KRKiREPj=ZrT$
Hoa!n78B@HM

diff --git app/src/main/res/drawable/ic_menu_revert.png app/src/main/res/drawable/ic_menu_revert.png
new file mode 100644
index 0000000000000000000000000000000000000000..2afc8e8839c8d47fdb38e10c4780a2d908b27093
GIT binary patch
literal 1504
zc%17D@N?(olHy`uVBq!ia0vp^1|ZDA0wn)(8}a}trX+877Y2q^y~;*F9%q3^WHFHT
z0Ash4*>)hovI56+m|li+?|Q-+7+5xYx;TbJ9DX}3I%i6#!14OxbK6t5r&f#Z+#=u=
z_?T6{kwfJHYqE<A?}b$^u1X=QcbryyWD1lI5aJY6xws<qa#m6hbCN>W3@0Y7MU4w2
zI=MUqCl+by>VDZ&eeMT?*4w=D-wga}XDWa1v;6=6Onurp%Yu`7H~-(yiahtQo7JvM
z*JskbqKOZ*8{K&iBrbU4ba+44o%F<$8!C(WX7jAvx#7d<fOp$Id@42m9-h;}v^jQ4
ziuPR97ppnA?xdRUVtqVobyrtW_P)xB<vbUJS3R#xo#5G7AKz-_6(qpY+2ge{glpZR
zEidOP?zFtO{o0Yl{7GkT-$=MMV`cq|1M`Fr6s=^jPY?V2+PS$Y!lq=yk}W3ouVSB@
z`05mWI(0woeY2>E#8<&vRcaSqBG-R-(*13zqEu-11Bu=v!e&*sURpe<?+aTOp}p~8
zTKoRyTVGhhPs`mESs8b)I&5QFl54|`_XTlFyd6X5^cK!yi^}E}-}mRR#qN`96N|E%
zyk?$kO9(DK?%bR-@jwRy*WHrtRjV%ZS?0a!e`5FX)~?R7xzY#wLRdnNsAl=wCWLQ&
z`uNB^=1)6Reke5s7XGMkE?8ihe(BV$f6w&iyDiea!;~W(8Gf}S^p8yILA7rAerA2Q
zkMDNa?#O>~V|gFXWB0c_H&=G28H%NL%I^Jpo3k|3H~H3F#@So7-(L<;o0}XgpS%0f
znH9!2-*zQ%KU(fx7Lws=7Ja$&qSv$F+~qr;-O&#-wYem9c|vva!#66L3nt!Ye^>YD
zMN^nThIVQ1;rv;F<?T6FJ{$YZX#RO7b=L0_F4CpH)Y+xy<uBQLeb)s)Ym0a1w6`ww
zTRJs<<%(Tv-fr9>eA|2T=enK7Q8zV~1-q+AZV9zH9<o33*l&HY+HLk>HwAZ^n+3;P
z<co+boTnL-yX{xc_dg*{alPEPr#(D7H84}1mr;i`?{d}7i+&Z~A4df6{51(YTP6GI
zci^YX6K&tI%@La9VRz+a`Ag1oV(woZr{|tpHM^<k*{&ne%k|ky8e?yKIHg$J9LVUz
zHQjr?UmV-6<tvgF)w>lvx?sN2UGS~O@<I){gEFm-ckWE)`L{ZF!Q!WNwr=zF<kUHf
z_s+TSo_iL1`^QCYC+<bIl}P?#X|mUJnW-3m>CgLyvmO`J{dyQDCBIJ2pWe1^>pe-q
zsIL9<j_X{#!qS@K_TpgZ(YT}MckKQ-HR;i!d$&&f>im7oGjf$Dn}wsDmN&PLf@Xxw
z!w&})>;3X(#m%_tZQIfNbg%Zmz~bsGrd00ji^{^+>I=@_#OiV=Qf<DEYmJSFOZKw-
zIOVJRUT4mla4=EeO=_fLm{ujrL4l&ijgRK?ZsOyO)On}bX{aRYs9ouBqSdsNEx{nH
zppdg_zNXIn4etd%FY})>O(j=~u_tQkmi0o<LyemD1iL;>m7aFPHBa;-%Yhb&;+5f7
zQmq~{rw8epN}AmlsV#kKn`(OcP15%EO3z2WKZ2T=?O!~<w>;Q;Nn<AG`*)km{ye|*
zYfa^?+7qT<PKda=22M_E{crj0zR@Z6yN^^WE!U@Ud6@m&k+MIK<uIe`ug^PrE`HoK
z>(V^o3LY=+<u6{iE!;eH{qhDSCY_b>-|zl;d(d-Y)^F9_DgX6<OHbOvo!!>^UJF=`
zsg}4#l%yn<q*^5xr2;7iBLhPNT>}eULz56AV=H4zD+3c<19K|_gJpN`Pejp>o1c=I
zR*74~^@em^pay=BhP2F_lGGxrq@2<s1_M3A;F9zjpcEgHR8D?UYB7UJ=?V@dpo}C)
sCOAK>q&%@GmBBFuD5>C?o0y&&l$w}QS$Hzl2B?U^)78&qol`;+09_fNrT_o{

diff --git app/src/main/res/drawable/live_folder_notes.png app/src/main/res/drawable/live_folder_notes.png
new file mode 100644
index 0000000000000000000000000000000000000000..c565cd0d1e57b2c1097ee097231d4b5c2d8a0b6e
GIT binary patch
literal 2664
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
Wk})ts^dkrW0000<MNUMnLSTXoq5nPr

diff --git app/src/main/res/drawable/app_notes.png app/src/main/res/drawable/app_notes.png
new file mode 100644
index 0000000000000000000000000000000000000000..81d1c22e1ead2b26a08f6c05c6cb5cd2a23db3ca
GIT binary patch
literal 2093
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
X_fE|T^z7Lf00000NkvXXu0mjfr4j8F

diff --git app/src/main/res/drawable/ic_menu_delete.png app/src/main/res/drawable/ic_menu_delete.png
new file mode 100644
index 0000000000000000000000000000000000000000..bb533f75ec932c1c962a8cb65a1a2c7610f83bc9
GIT binary patch
literal 1457
zc%17D@N?(olHy`uVBq!ia0vp^1|ZDA0wn)(8}a}trX+877Y2q^y~;*F9%q3^WHFHT
z0Ash4*>)hovI56+m|li+?|Q-+7+6|7T^vIq4!@lqof8r&(zbu=`FAtRsuoZ63f$PX
zVB!O2H&&A_@gA4ngLW%em|4CYWET$PWLvB#B_u3T8~j-Hk!{8vLFt1My%|b|Zb>F~
z5u&V@r*LgqdinO8z2842rdjFEExYw8E#mX0b5_-B>;L|bvYyPG{-!?P=xVdo;Uk)J
zcK68N&}4tYaah7(<%5`Ym(K3$i1(kKpwBSdYg^%dh7`Z~2b(|5$@=r7b+73pe@>H>
zc|Uw7>27j9ojRQ{;MEfU?fP#jtoE6OD*yDfU^6}${#pLstvFrDxqDi4W49&fcRXKu
z>|1%1n7Po?<i-{s-{-mQY5VIh%l_T%>fSfKNlHBW7^B?d=*#IghP`PEx2?GtTO9N1
z{*MVO9T*Ee-?O?uFLB!(^*`fxq>qH#$}8@*uR|ni+6xSCGb?`IGkyB%Ip1!qN;k8K
zw)y(YIW1juSy6aU&(=k%7ITCGWu{u(yfQ0NNo$hPm+*MY^3=Bd`~3E;^b%GuGn%k#
z*UMdbR^L+UeZqxZ_AdEX^UrjWS)T3ECl(D~pY?ut!h84ktF??tmqHfs7=<iw@tMVu
zI^p1-Jxq~RE8@RinRk0}|DPL^9;>Vp&xp8?q1}G9!STS46G75Pp8H9#DCO&v#xXT4
z*Z0VIZglC03WK1)?+4ACf)x%Yr)sX5sIMcewKIajDS&;Qje}`|=OPU+W!2+lt5!6n
z--rl0u;vrPbe0+aE6*QSv(3M~bT7-PyP*eV*5u!}@|ON~@RGs5(v$NXv_DFhUx;aI
zSvBKaxctN%!_7R+(GBHKnKMtv1y}#Gx@}SUdtTxs;o95xc;2_VcFl8kw`?$Dxyn{|
zNqX|E$Az-1CQ1pYYh)d-Q2glE)^~l^)_2ZP-sjFtx%Ni<E|b8@(AnS4zU_^@#wLCH
z=6@5}&cz99b8T+jnOBz8%sX+>oB0kO3mGg=D>WQ9*14%4rk@k_*yMD<@vf(<^}e?Y
zvz30EyIQ>Md=m>(lgPC4RSaAlUehL*lyuvd=`3b0`F8&8x|i=>$}iHEu~XZ(UA^32
zL@j0;Cj*m0g%F!$*QSnAqazCn%Pc;nbvOpj7VTxSWINN+=*U^obZo^lo7I{j%#8~+
zvhk+scg_6~%IEO8Vb*k}Lml>3t1dI2@Dy=d+Rvu_C$i<w`U!@<om@*z-oNx%$>bt&
z`Oud37!3ip1#a%8KFr2U9F>V(#u^*AA1^ah?(Ew8*EVg2tAgxjn_LFX4BhOt#$7^B
zJigRUNq(?s_S#cD=>by|ChYjTPV;d<&5ZJz$oi&78Sieto}<lgaBx=DJEjoPi}SS2
z?p@xtBZ!CD_x1a`0hR@EqMbj#?EA{zufH~2R3yyTqM4K7)s3^!EZzP;+qxHpCuzk@
z`(;&Ws3tmRwR%pUr{gu(dxz9*3~U=z*RWi_@HXm^#|DQDhNclb2P-D49a@m`IBJ#u
zgLUaYOBh-vZ}D*bc6w`U`R>iC_MaAAGJ0g`bbZct)!lw!FQ)8I<tocLrLG=*g;T}q
zkj=TIcAgnAuaC}iul73B5XK@>m+pAdYw{<p-=&6AmD1nz%-!~v-MG+cHP@B*mB4~Y
zwZt`|BqgyV)hf9t6-Y4{85kPq8d&HWnuHh`TNztg85rvtm|GbbBv(C@N70a*pOTqY
ziCcq^dgNlD27Zu+w9K56)FP{-oYEo&13kmwlJpv&6d#gQPJU8qF@s6z3JxWpj3h`V
rI6tkVJh3R1!7&9Wso<HLn4TJxnwU~qcrw)nsEEPS)z4*}Q$iB}ne1+k

diff --git app/src/main/res/drawable/ic_menu_compose.png app/src/main/res/drawable/ic_menu_compose.png
new file mode 100644
index 0000000000000000000000000000000000000000..121228c8c8783fae1105d994e8c2ade502fb3f82
GIT binary patch
literal 1597
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

diff --git app/src/main/res/drawable/ic_menu_edit.png app/src/main/res/drawable/ic_menu_edit.png
new file mode 100644
index 0000000000000000000000000000000000000000..1de85ca16548c27fc3b487dc429ae97a296f0006
GIT binary patch
literal 1700
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

diff --git app/src/main/res/drawable-hdpi/live_folder_notes.png app/src/main/res/drawable-hdpi/live_folder_notes.png
new file mode 100644
index 0000000000000000000000000000000000000000..c6d26f5cb99294e3513d58b69e7185843d571344
GIT binary patch
literal 4871
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

diff --git app/src/main/res/drawable/ic_menu_save.png app/src/main/res/drawable/ic_menu_save.png
new file mode 100644
index 0000000000000000000000000000000000000000..ffd7fb721697a3280d1447ff4f79e9186f53319b
GIT binary patch
literal 1461
zc${^Vc{J1u6vuxU%h1@DY$cJhj;$<}8N)Dyv1UnTn6V9+3`Uq5OTs}}QhJSLj8f5S
zh=WIzbsAelD&f$xWnTs-^u{~qo%7xw?~i-G=ibl#{Cm^Ujy4cs1z`XHAShca7j8li
zO9;g6`y%>BxWVghZ({`j&$CV%a3?U)){DeV+rJCRB3wLN#t`8_|F}Tka^__K0HvX<
z;BKC6OZR=#+})+SZV^^U{h5X_v)S2wbD0o{FNnNdGzcLp)s0RC7h?Qe9`Yxm!Opq6
z(smNkpbyFZa9cw>zyBuq!j2k$;^qmYY@SJ$@la0%so#{aMYNdB-X6<|V@LZfH;`%j
zUw{1aix01tygW6L+Oy9ZJZM^M!f>W*AN#jDn5BVbd^?;-1$?pjd}EsFcU$8=YE!fz
z0g9Nh<xe0A+>eNOb#_!|xOJ9aWx|sVzLuL;M<OQF*c%1!Z`L9x%V`|m7_dBt^EfV%
znx6G@q`0|@!q~Vsr`XBQKL4SCnJ#p$t@N0jW&*G0>W&8+OBMIsKIqH2O{0B9oZ2P!
zzVIo!7+<V7xTS;=JQ}_Sw^8bJkPCV=eWu%s$~=C8_5JEvgQYT9XF|UkCP#~an1|se
zf0icu)MbaQx3R{AuWThhRqnQR9Z*V1B#ZMx1uofl1v`DDt@M#?>@|D>h`6LDC8l#(
z=AUj-cK#%!=0T3d4FTm>bLf)8vc2M<-olv@(;5{i0bXfuo7J}&vAew%O5-)_)9vhe
zBdQEfhD-~=-G#>!_DH%~2C)h!SMPQDS;R8+nAZLwR7QOhJy>4c9jism@Des@IqyAk
zu2$s9ceYXbYfqbyoFnoW^;B`6%A5`bLS<;Gm%8g}wcCS~0c%x=<|`LSHR@)*ApU;S
zycM#$4(B@(L>a;R@U>V<2K89h!%7P=1xVvERb9DjJF%l_JdO&L*)_>Jg-LR9iwi?y
zKC>OgRgsMu+5M*XjHwK5=k~%yoo{?g&T23ur+y>vhE(h7>zHe7%6PMt_kaP6IVBv;
z<FN@tB>|t`%rHsr=9_&o+j9C<qTMB-m^2i)#5jN{fSy+^b^XHVqw;8^q;wo;8bx5^
zQD!Q-r!<i<^dCw^jVFXuRn|7Ap4GYVuO(=rwH<lQcUo(1>GjQ^vRdA8ND)i+F*}~g
zsWSPZ1@!hkc~-|A<OIq^PdmQ-cp3*OdZxvv4DWEUTsH%Sa~pR==jPvCc0#Hb)F&8K
z2@t_zcC#u4<#q9s<4-F&w9w;I&3YHe33qYt5dm+Gl{|zIRu=x?TaZXeTUF_Du-hOM
z`MNEhysdHPNy~Z&O?rOR@L}k6p|cejP6gl@o9JgN<~QnXO?S&HdyeCOGa$ewwYYcI
zIV&tht7|I7oY9J-liM0`iB|^s->wdkl_=ZWgH&hD2Oi2WaM{rX%;rm(2u7h2DbNtH
zz*ywj;0gZxz1C)m`RXO>UC*W1Ogih!QMAN+=%tZ{w-Y7~aXZm{j7Y(e)E9#2gagC!
zQkGirvwngvEX%5hfi62;=DSb%G;3t%H-UG|ES_H|F=4KSNIp}8O-UKUqkmLa1wcfo
z_|tQl?HPAKwBe{4KzT&3tJ@)N7Ew+U`b`klJ^5HfDi<~PwCtdKqQ69Wy3ThOt8w=C
z4lQxG&YrA5)h~nbpJM(acmq~o_IhI`8&pD?v1=A0!W2!vV#({rE)VlbPen3N-&XGL
zw6t3o(><Ifx2nUr&q+PX+A|7=jl!D+MB=#t7(n%*I#3fGeIqvmLo-8DGpMl+^qd(K
z3OxU){vRPc0v8f^<Nt;0+hK)VLF`Zn3<-<EN1FMEMMnZqU47T6pad=w{TB+0@W+z?
yqv#4DRW6Y~B(4#GQDkf+9)RPxPz4o^4Z^$NvA7%8S@`qZBLHRXX!X((lk^wVf`)<s

diff --git app/src/main/res/drawable-hdpi/ic_menu_delete.png app/src/main/res/drawable-hdpi/ic_menu_delete.png
new file mode 100644
index 0000000000000000000000000000000000000000..ce5ecc48a161a5a4852cd3f28b205e3a91a780b0
GIT binary patch
literal 2029
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

diff --git app/src/main/res/drawable-hdpi/ic_menu_revert.png app/src/main/res/drawable-hdpi/ic_menu_revert.png
new file mode 100644
index 0000000000000000000000000000000000000000..ffc67d913f3d17aaee7efe2010fb2d447a4218fe
GIT binary patch
literal 2093
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

diff --git app/src/main/res/drawable-hdpi/ic_menu_edit.png app/src/main/res/drawable-hdpi/ic_menu_edit.png
new file mode 100644
index 0000000000000000000000000000000000000000..4748cdadd19df848f73c3f51ac00990d9d510c00
GIT binary patch
literal 2399
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
A9{>OV

diff --git app/src/main/res/drawable-hdpi/app_notes.png app/src/main/res/drawable-hdpi/app_notes.png
new file mode 100644
index 0000000000000000000000000000000000000000..34918237f44eca9a141b37763b4a64463dd9ed85
GIT binary patch
literal 3941
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

diff --git app/src/main/res/drawable-hdpi/ic_menu_save.png app/src/main/res/drawable-hdpi/ic_menu_save.png
new file mode 100644
index 0000000000000000000000000000000000000000..62d0b9a00b810234fecb3d45ba97bb1d7eb13726
GIT binary patch
literal 2050
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
O0-&w!P+Uuo=zjns3dMN<

diff --git app/src/main/res/drawable-hdpi/ic_menu_compose.png app/src/main/res/drawable-hdpi/ic_menu_compose.png
new file mode 100644
index 0000000000000000000000000000000000000000..bc153fac0f710309ed366cfc433ee0260df1cf81
GIT binary patch
literal 2324
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

diff --git app/src/main/res/drawable-ldpi/live_folder_notes.png app/src/main/res/drawable-ldpi/live_folder_notes.png
new file mode 100644
index 0000000000000000000000000000000000000000..d547cbf2c71238261ac94cf5f660c8dab9b03c66
GIT binary patch
literal 1865
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
Dx7LHo

diff --git app/src/main/res/drawable-ldpi/app_notes.png app/src/main/res/drawable-ldpi/app_notes.png
new file mode 100644
index 0000000000000000000000000000000000000000..8432ce63b4f8c851ad4d8f51dc5de8fc08e3e070
GIT binary patch
literal 1466
zc$@*c1x5OaP)<h;3K|Lk000e1NJLTq001Na001Ni1^@s6;Q*MJ0000PbVXQnQ*UN;
zcVTj606}DLVr3vnZDD6+Qe|Oed2z{QJOBU%TuDShRCwCVSj}!6MG&s;9`D*4dma8{
zNFo$VmSqQSfP^>%t#aWJxFhibNSrtzUV;<i$^-bw!68Dj;DTbnL|6jHCbj_|EN~L<
zOm|UL(>2>W9{=q6KxWmN>7Jghuj}Wl>NSW6&(f8p9b?S@21FHO;TgNKQ^sw4*QPdc
z#=KFlK&>BJ9{YG6AhuiUy*ImaUwm})%WlW^5G{S_z!wDsA0W^&!5b*h(H+1C1ers9
z?=2McF31a%cRm<ki}0MMIsE?h{eura`|8*4NY3LrAbW~-raylF<qw~qu{~=@Iu?L|
zHiaGx2CxRfIGV`N4a%DAe%2ybXQ-jfL(I!>jHh=-=CoVx=35I_Kc$amn-tOn$T6Vf
zzP};6qA9WkER{#1fJBfs;<y9?lBROfpcm&f{3BrCCIF3<vA_V?MuCCi96erTOI*Z<
zcx-ZG+fO~$4W(deo)$$`7Mnw&0-`VyQUDbFoW|+FWOS!}8UjNmE6B{g2qh3>WUYgL
z4Etp#ZvH|}ops;%#LnHhQ-vdZa}UhBw}&W#h49^oAUr`IJf`EKxj4SFvt!`%+gX!^
zPK};Ur(<SkX9o*UO@fX6CjL-h5Y6Jf2j|=nx9Qx&!$S=ob74SPmO;DS9t=#7xv8J-
zzKK**O)#)joBFQRYK_c8LkmcsosxE47hXk&wI=}avyb1T-=$+02DH6}uztT_&n*Xj
zqYz$aVVHnH$efFSJzy1%m{<elXN{FjF>&qx8Ab<m<5hs=TP!%LeVf|rtU0Vq!CJAl
zu34<WszwZfDb2>;8km|MJ$0Ngi71&uI2~tTYFY-T(Z(j>XLf3xlloN=*BQ%)swiVn
zv`{Ko2rmlbaqaV+g>qw1DM+0=GN3K;ne`v~ac3m_Auad|6Jt?%2%Er3s$ij<Ua(?r
zL#e_Fa1W)0vCO4(+uP5_@gWOKuW7U}n~_<TjgYHqL7mvSfhNnGWfM|VGY(8UdBu!p
zGFExT#4OPJO5Lfc(r`~rsi9t{g0rgB>@0^?+lx>ZlIIl=e#hjQ&Q(9s?{toWQ-9L_
zNPr%01^D?#B|=(&d<Zv!B+SZ3EI$`zpR0h7O9B=LlRyYkidf@>K3GZoYIlE(D7$t&
zz`|k~8M4bAlC)HE$-q=tg>~IL>_?nCON|aT##-vkWaIgeUcwtvXM`cHNfT>R+DH>_
znl|!$j3_Hv*jAYv*q4%WBPF}0jGuB+9o$$xw7nhRr*-C*XpTqJHbND?48bu;Mm~~o
zw`J`tb%iyNAU%Ck5@eQ9T}HmNyE~2#T|-!0!e}W1wMRl1OFq%vij&41#X?gS*IEeC
z33ur@1GE!krVgK!8zH8Hw7yZ(rY1<uocd3bKaB*47v!c~!+DIITD71%&THJHyp`rF
z9`E=2Cu*mW0PXKu*nALc7~+%g2btjkh_84$5(VZX7Hqf{ihg6Tstr)iCPwNYiB!&k
z(UgDxH3n0^avflCS<OS@_Q(%zxoF0+99BN!_nKzZ+$`8Ro16o)DjKiM0MrkN=K%_&
z;^VZuAlnF-Itf;P5=1kk`7N!L((tEs`tcYYE^<(06&$autlT>~I(n>3>~T<Ir#`|U
zSvzS`O$#@^v;X)(V#d|g)w^_mqIKWUVWHtX#aerT+QR(&{M)@=@11V9`(oJKG&nzh
zYLqmM)w4SFpRBE|eNWf7)ZL)ANA2klxi$deZA?W_<Vo-nwV8Ozyv!d+A^y2=K<yF7
z4Yhw&OJ@Pn^F1HRrsI*f6@gwBP##Tn6z_#P_j!QyWN9O~%YsR2*r9g9y#EO>0P@uD
UFajaGKmY&$07*qoM6N<$g7Z4FQvd(}

diff --git app/src/main/res/drawable-ldpi/add.png app/src/main/res/drawable-ldpi/add.png
new file mode 100644
index 0000000000000000000000000000000000000000..2fae064704ff4466ef0cfa05886188eddeedb16d
GIT binary patch
literal 5791
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
b;5gB#aFy28Rya}yP!3}QQ~mnO&hh^PugQkS

